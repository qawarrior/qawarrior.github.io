<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paul H Cassidy (qawarrior) Software Developer on Paul H Cassidy (qawarrior) Software Developer</title>
    <link>https://qawarrior.github.io/index.xml</link>
    <description>Recent content in Paul H Cassidy (qawarrior) Software Developer on Paul H Cassidy (qawarrior) Software Developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Paul H Cassidy</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Restic Bsckups For The Mere Mortal Part Two</title>
      <link>https://qawarrior.github.io/2017/06/29/restic-bsckups-for-the-mere-mortal-part-two</link>
      <pubDate>Thu, 29 Jun 2017 22:38:12 -0700</pubDate>
      
      <guid>https://qawarrior.github.io/2017/06/29/restic-bsckups-for-the-mere-mortal-part-two</guid>
      <description>&lt;p&gt;This is part 2 of our &lt;a href=&#34;http://github.com/restic/restic&#34; target=&#34;_blank&#34;&gt;Restic&lt;/a&gt; overview. Just for review last time we learned that restic is a command line backup tool written in go. We learned how to create a repo to hold our backups (snapshots). We defined environment variables so restic could aitomatical find our repo and the password for that repo. we backed up our documents directory.&lt;/p&gt;

&lt;p&gt;Today in part 2 we are going to learn about managing our backups - from here out we will be refering to them as snapshots as that is what restic calls them. You should create a few more snapshots of differnt directories for this to make more sense. Once you have a few snapshots to manage you can view them like so.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;restic snapshots&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The output will be something like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ID        Date                 Host        Tags        Directory
----------------------------------------------------------------------
bee0e81e  2017-06-29 09:01:24  qawarriorlt          ┌── C:\Users\qawarrior\Documents
                                                    └── C:\work
fec49150  2017-06-29 12:14:29  qawarriorlt              C:\Users\qawarrior\Documents
008949f0  2017-06-29 12:18:39  qawarriorlt              C:\work
6640ae37  2017-06-29 12:25:19  qawarriorlt              C:\Users\qawarrior\Documents
57508869  2017-06-29 12:26:15  qawarriorlt              C:\work
9694309a  2017-06-29 22:43:23  qawarriorlt              C:\work
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also filter your snapshots by add the path to the command.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;restic snapshots --path=&amp;quot;C:\Users\qawarrior\Documents&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ID        Date                 Host        Tags        Directory
----------------------------------------------------------------------
bee0e81e  2017-06-29 09:01:24  qawarriorlt          ┌── C:\Users\qawarrior\Documents
                                                    └── C:\work
fec49150  2017-06-29 12:14:29  qawarriorlt              C:\Users\qawarrior\Documents
6640ae37  2017-06-29 12:25:19  qawarriorlt              C:\Users\qawarrior\Documents
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can even filter by host like so.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;restic snapshots --host qawarriorlt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Although this only really makes sense with a remote backup repo where you have multiple hosts backing up to say a minio server backed by AWS S3.&lt;/p&gt;

&lt;p&gt;Ok now we know how create, list, and filter our sanpshots. Lets learn how to restore a snapshot because &amp;ldquo;Nobody really wants to backup but everyone wants to be able to restore&amp;rdquo;. First thisng to know is that you can restore a snapshot to any path you choose not just the original path. Restoring a sanpshot looks like so.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;restic restor 6640ae37 --target C:\Users\qawarrior\Restored-Documents&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can also also use the Latest Key word to restore the latest snapshot. Restore can also be used with the path and host options also. here is a command using them all.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;restic restore latest --target C:\work-restored --path &amp;quot;C:\work&amp;quot; --host qawarriorlt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Last but not least we need to learn how to remove old snapshots. First there is the forget command which will remove the snapshot from the list but not the data referenced. To remove the data the prune command needs to be call afterwards or use the &amp;ndash;prune option with the forget command to have the data automatically reved when forgotten. Like so.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;restic forget bee0e81e --prune&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Our snapshots list now look like so.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ID        Date                 Host        Tags        Directory
----------------------------------------------------------------------
fec49150  2017-06-29 12:14:29  qawarriorlt              C:\Users\qawarrior\Documents
008949f0  2017-06-29 12:18:39  qawarriorlt              C:\work
6640ae37  2017-06-29 12:25:19  qawarriorlt              C:\Users\qawarrior\Documents
57508869  2017-06-29 12:26:15  qawarriorlt              C:\work
9694309a  2017-06-29 22:43:23  qawarriorlt              C:\work
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok so we have learned how to manage our sanpshots by listing them, filtering them, restoring them, and removing them. Next time in part 3 we will look at how to simply script and automate the taking of snapshots of our important directory structures.&lt;/p&gt;

&lt;p&gt;Enjoy and Get Command!&lt;br&gt;
Paul H Cassidy&lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Restic Bsckups For The Mere Mortal Part One</title>
      <link>https://qawarrior.github.io/2017/06/29/restic-bsckups-for-the-mere-mortal-part-one</link>
      <pubDate>Thu, 29 Jun 2017 10:41:28 -0700</pubDate>
      
      <guid>https://qawarrior.github.io/2017/06/29/restic-bsckups-for-the-mere-mortal-part-one</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://github.com/restic/restic&#34; target=&#34;_blank&#34;&gt;Restic&lt;/a&gt; is a command line backup tool written in Googles go language. This tool totally rocks. You start by defining a backup repository that can be a local file system path, SFTP server, AWS S3, Minio server backed by S3, or various other ways. Restic is open source and has docs on how to expand its capabilities like adding your own backup target perhaps a SQL Database, etc. Lets look at a simple example of creating a local repo for the backups. We asseme that restic is in your path and can be call by name.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;restic init --repo F:\Backups&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When you define the repository restic will prompt you for a password and then again to confirm that password. The repo and the data it contains is encrypted and secure. Once the repo is created you have some choices before moving forward you can backup file system paths.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;restic -r F:\Backups backup C:\users\qawarrior\documents&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will prompt you for your passward and then backup the users documents directory. this is fast and nice but not really suited to automated backups. So to make it a little more automation friendly we will define the environment variable &amp;ldquo;RESTIC_PASSWORD&amp;rdquo; and assign it the value of our repo&amp;rsquo;s password. Now the backup command is entered same as before but we are not prompted for our password.&lt;/p&gt;

&lt;p&gt;The Command is still a bit verbose as we have to enter the path to our backup repo each time. The command is still quite redundant. So to remove this we will define the &amp;ldquo;RESTIC_REPOSITORY&amp;rdquo; environment variabke with the value of the path to our backup repo. Now the backup command is this.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;restic backup C:\users\qawarrior\documents&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now restic uses our defined repo and password to backup the documents directory. we can call restic now with differing filepaths or a comma seperated list of paths and it just works. this allows us to create scripts (bash, bat, powershell, etc) to perform our backs from differing locations to our repo.&lt;/p&gt;

&lt;p&gt;In part 2 I will go over viewing snapshots (restic&amp;rsquo;s name for each backup) and managing snapshots.&lt;/p&gt;

&lt;p&gt;Enjoy and Get Command&lt;br&gt;
Paul H Cassidy (qawarrior)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PSSCRIPTS</title>
      <link>https://qawarrior.github.io/project/psscripts-github/</link>
      <pubDate>Sat, 29 Apr 2017 19:48:26 -0700</pubDate>
      
      <guid>https://qawarrior.github.io/project/psscripts-github/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ModuleScaffolding</title>
      <link>https://qawarrior.github.io/project/modulescaffolding-github/</link>
      <pubDate>Sat, 29 Apr 2017 14:07:02 -0700</pubDate>
      
      <guid>https://qawarrior.github.io/project/modulescaffolding-github/</guid>
      <description></description>
    </item>
    
    <item>
      <title>trainings</title>
      <link>https://qawarrior.github.io/project/trainings-github/</link>
      <pubDate>Sat, 29 Apr 2017 14:02:36 -0700</pubDate>
      
      <guid>https://qawarrior.github.io/project/trainings-github/</guid>
      <description></description>
    </item>
    
    <item>
      <title>go-examples</title>
      <link>https://qawarrior.github.io/project/go-examples-github/</link>
      <pubDate>Sat, 29 Apr 2017 13:55:29 -0700</pubDate>
      
      <guid>https://qawarrior.github.io/project/go-examples-github/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Playlister</title>
      <link>https://qawarrior.github.io/project/playlister-github/</link>
      <pubDate>Sat, 29 Apr 2017 13:49:14 -0700</pubDate>
      
      <guid>https://qawarrior.github.io/project/playlister-github/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Wait-Object Powershell Function</title>
      <link>https://qawarrior.github.io/2017/04/29/wait-object-powershell-function</link>
      <pubDate>Sat, 29 Apr 2017 09:11:27 -0700</pubDate>
      
      <guid>https://qawarrior.github.io/2017/04/29/wait-object-powershell-function</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;#Requires -Version 3.0

&amp;lt;#
.SYNOPSIS
  Pauses execution until scriptblock returns expected object.
.DESCRIPTION
  The command will wait for a specific object to be returned from a scriptblock.
  If the object is returned the command will return the object and the script will continue
  execution but if the object is not returned before the timeout then an error record is returned
  and continuation of the script depends on ErrorAction Preference
.PARAMETER InputObject
  The Object that is expected to be returned from the scriptblock.
.PARAMETER ScriptBlock
  The scriptblock that is expected to return the object being waited on.
  The scriptblock will be invoked with one second sleeps in between invocations.
.PARAMETER TimeOut
  The number of Seconds to wait for the object to be returned.
  The command will return an error record once the Timeout value is exceeded
.EXAMPLE
  $true | Wait-Object {Test-Path C:\users\foo\file.txt} -Timeout 120
  this will wait up to 120 seconds for the test for the path to return true 
.EXAMPLE
  50 | Wait-Object {Get-Random -Min 0 -Max 99} -Timeout 90
  this example will keep invoking the scriptblock until 50 is returned or it will timeout in 90 seconds
.NOTES
  this is option 2
.FUNCTIONALITY
  a utility to help control the data flow through a script
#&amp;gt;
function Wait-Object {
  [CmdletBinding()]
  Param (
    [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    [Object]
    $InputObject,
    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    [ScriptBlock]
    $ScriptBlock,
    [ValidateRange(0,600)]
    [int]
    $TimeOut=120
  )
  
  PROCESS {
    $StartTime = [DateTime]::Now
    $EndTime = $StartTime.AddSeconds($TimeOut)
    Write-Verbose &#39;Waiting for the ScriptBlock to return expected object&#39;
    while( $( &amp;amp; $ScriptBlock ) -ne $InputObject ) {
      Write-Verbose &#39;The scriptblock did not return the expected object&#39;
      if([DateTime]::Now -gt $EndTime) {
        Write-Error &amp;quot;The command started at $StartTime has timed out after $TimeOut seconds&amp;quot;
        return $null
      }
      else {
        Start-Sleep -Seconds 1
      }
    }
    Write-Verbose &#39;The ScriptBlock has returned the expected object&#39;
    return $InputObject
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cmdline Reference Guide</title>
      <link>https://qawarrior.github.io/2017/04/17/cmdline-reference-guide</link>
      <pubDate>Mon, 17 Apr 2017 10:52:54 -0700</pubDate>
      
      <guid>https://qawarrior.github.io/2017/04/17/cmdline-reference-guide</guid>
      <description>

&lt;p&gt;Theses commands need to be found in the path environment variable.&lt;/p&gt;

&lt;h3 id=&#34;go-tool-commands&#34;&gt;Go Tool Commands&lt;/h3&gt;

&lt;p&gt;Ran from the root of the main package.&lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build package and all sub-packages:&lt;br&gt;
&lt;code&gt;go build -v ./...&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;git-commands&#34;&gt;Git Commands&lt;/h3&gt;

&lt;p&gt;Ran from root of git repository.&lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stage all files for commit:&lt;br&gt;
&lt;code&gt;git add --all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Commit to local repository:&lt;br&gt;
&lt;code&gt;git commit -m &amp;quot;message for commit&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Push to remote repository:&lt;br&gt;
&lt;code&gt;git push origin master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Pull from remote repository:&lt;br&gt;
&lt;code&gt;git pull origin master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Initalize a new Repo:&lt;br&gt;
&lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add a Remote to a Local Repo:&lt;br&gt;
&lt;code&gt;git remote add origin https://github.com/username/Reponame.git&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;hugo-site-commands&#34;&gt;Hugo Site Commands&lt;/h3&gt;

&lt;p&gt;Ran from root of hugo site.&lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new hugo site template:&lt;br&gt;
&lt;code&gt;hugo new site &amp;quot;site name&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run Hugo development server:&lt;br&gt;
&lt;code&gt;hugo server --watch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Generate static site (defaults to ./public):&lt;br&gt;
&lt;code&gt;hugo&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;mongodb-commands&#34;&gt;MongoDB Commands&lt;/h3&gt;

&lt;p&gt;Ran from the database root unless path is specified in command.&lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the server with path to database:&lt;br&gt;
&lt;code&gt;mongod --dbpath .\db&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
