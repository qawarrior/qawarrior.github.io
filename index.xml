<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paul Cassidy Software Developer on Paul Cassidy Software Developer</title>
    <link>https://qawarrior.github.io/index.xml</link>
    <description>Recent content in Paul Cassidy Software Developer on Paul Cassidy Software Developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Paul H Cassidy</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Cmdline Reference Guide</title>
      <link>https://qawarrior.github.io/2017/04/17/cmdline-reference-guide</link>
      <pubDate>Mon, 17 Apr 2017 10:52:54 -0700</pubDate>
      
      <guid>https://qawarrior.github.io/2017/04/17/cmdline-reference-guide</guid>
      <description>

&lt;p&gt;Theses commands need to be found in the path environment variable.&lt;/p&gt;

&lt;h3 id=&#34;go-tool-commands&#34;&gt;Go Tool Commands&lt;/h3&gt;

&lt;p&gt;Ran from the root of the main package. &lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build package and all sub-packages - &lt;code&gt;go build -v ./...&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;git-commands&#34;&gt;Git Commands&lt;/h3&gt;

&lt;p&gt;Ran from root of git repository. &lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stage all files for commit - &lt;code&gt;git add --all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Commit to local repository - &lt;code&gt;git commit -m &amp;quot;message for commit&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Push to remote repository - &lt;code&gt;git push origin master&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;hugo-site-commands&#34;&gt;Hugo Site Commands&lt;/h3&gt;

&lt;p&gt;Ran from root of hugo site. &lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new hugo site template - &lt;code&gt;hugo new site &amp;quot;site name&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run Hugo development server - &lt;code&gt;hugo server --watch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Generate static site (defaults to ./public) - &lt;code&gt;hugo&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;mongodb-commands&#34;&gt;MongoDB Commands&lt;/h3&gt;

&lt;p&gt;Ran from the database root unless path is specified in command. &lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the server with path to database - &lt;code&gt;mongod --dbpath .\db&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>PSLogger</title>
      <link>https://qawarrior.github.io/project/pslogger-github/</link>
      <pubDate>Thu, 30 Mar 2017 09:28:05 -0700</pubDate>
      
      <guid>https://qawarrior.github.io/project/pslogger-github/</guid>
      <description></description>
    </item>
    
    <item>
      <title>PSWebdriver</title>
      <link>https://qawarrior.github.io/project/pswebdriver-github/</link>
      <pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/project/pswebdriver-github/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Winner is ... Wait-Object</title>
      <link>https://qawarrior.github.io/2014/07/17/the-winner-is-...-wait-object</link>
      <pubDate>Thu, 17 Jul 2014 10:06:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/07/17/the-winner-is-...-wait-object</guid>
      <description>&lt;p&gt;I decided I like the for where is the object i was waiting for was returned, I would pass the InputObject on down the pipeline but if not Write-Error and return null. This allows me to 1. let the command run and do a null check on the return value to decide if the script should continue&lt;br /&gt;&lt;br /&gt;Example 1.&lt;br /&gt;$returned = $false | Wait-Object -ScriptBlock {Test-Path C:\Wait\For\Removal } -TimeOut 10&lt;br /&gt;&lt;br /&gt;if($returned -ne $null) {&lt;br /&gt;&amp;nbsp; #do something&lt;br /&gt;}&lt;br /&gt;else {&lt;br /&gt;&amp;nbsp; #do something else&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;Also this lets me use a try / catch &amp;nbsp;with the ErrorAction set to stop causing the the catch to trigger in event of failure.&lt;br /&gt;&lt;br /&gt;Example 2.&lt;br /&gt;try {&lt;br /&gt;&amp;nbsp; $returned = $false | Wait-Object -ScriptBlock {Test-Path C:\Wait\For\Removal } -TimeOut 10 -ErrorAction Stop&lt;br /&gt;}&lt;br /&gt;catch {&lt;br /&gt;&amp;nbsp; exit&lt;br /&gt;}&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Here is the Code: &lt;script src=&#34;https://gist.github.com/qawarrior/b9acc089f0b04d1a126b.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wait-Object Function Takes Place of Wait-ValueReturned</title>
      <link>https://qawarrior.github.io/2014/07/14/wait-object-function-takes-place-of-wait-valuereturned</link>
      <pubDate>Mon, 14 Jul 2014 10:42:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/07/14/wait-object-function-takes-place-of-wait-valuereturned</guid>
      <description>&lt;p&gt;I previously posted a function Wait-ValueReturned but is did not seem like it flowed with the rest of PowerShell so I re factored the code into Wait-Object but I am not sure about how the command should return. I have considered first return bool from the command to indicate success, which means the command will always return true or false. My other option is to return to object that was being waited on if success and return error record on fail. here is examples of both. Which makes more sense to use in a script&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;Returning Bool: &lt;script src=&#34;https://gist.github.com/qawarrior/b9acc089f0b04d1a126b.js&#34;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;Returning object or error: &lt;script src=&#34;https://gist.github.com/qawarrior/b9acc089f0b04d1a126b.js&#34;&gt;&lt;/script&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Utility Function Wait-ValueReturned</title>
      <link>https://qawarrior.github.io/2014/06/23/new-utility-function-wait-valuereturned</link>
      <pubDate>Mon, 23 Jun 2014 08:02:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/06/23/new-utility-function-wait-valuereturned</guid>
      <description>&lt;p&gt;I Just need a way to block a scripts execution while I wait on some command to return the correct value. So I created this little function to allow me to pass the command or commands and what i expect back and let it handle the work instead of littering my scripts main body with a bunch of loops, if / else, and sleeps, I can use this to encapsulate all that into a clean function.&lt;br&gt;&lt;script src=&#34;https://gist.github.com/qawarrior/01c58bbcec77b3465b2c.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell Talk at Silicon Valley Code Camp</title>
      <link>https://qawarrior.github.io/2014/05/29/powershell-talk-at-silicon-valley-code-camp</link>
      <pubDate>Thu, 29 May 2014 09:14:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/05/29/powershell-talk-at-silicon-valley-code-camp</guid>
      <description>&lt;p&gt;&lt;a href=&#39;http://www.siliconvalley-codecamp.com/Presenter/2014/Session/Paul-Cassidy-697&#39; target=&#39;_new&#39;   &gt;&lt;img title=&#39;I am speaking at silicon valley code camp. Please come to my session!  Click here for details and register if you are not already.&#39; alt=&#39;I am speaking at silicon valley code camp. Please come to my session!  Click here for details.&#39;   src=&#39;http://www.siliconvalley-codecamp.com/images/speaker01.jpg?w=250&#39; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Credential IO Script</title>
      <link>https://qawarrior.github.io/2014/05/29/credential-io-script</link>
      <pubDate>Thu, 29 May 2014 08:52:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/05/29/credential-io-script</guid>
      <description>&lt;p&gt;This is an updated version of the Import and Export Credential functions that store the creds in a json format versus the clixml format used by the original created by the guys @ powertips &amp;amp; powershell.com. I also store them in a known location and I use a string for a look up key to store and retrieve them. This allows me to use EFS to further secure the files on the drive. Enjoy!!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;http://pastebin.com/embed_js.php?i=6gZq24wX&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Project: PoshLogger</title>
      <link>https://qawarrior.github.io/2011/03/29/new-project-poshlogger</link>
      <pubDate>Tue, 29 Mar 2011 10:56:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/03/29/new-project-poshlogger</guid>
      <description>&lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;New on Codeplex @ &lt;a href=&#34;http://poshlogger.codeplex&#34;&gt;http://poshlogger.codeplex&lt;/a&gt; my project to create a good, easy, unified logger for powerShell scripts, and PowerShell applications. I started with a script that Joel Bennet posted on poshcode.org and next thing you know I had a simple logger that I have been using in my internal projects on a day to day basis. If your looking for a logger jump in and help create a really great Logging Experience in PowerShell. My thanks to Joel for the Idea and thanks to the log4net team for the object model. &lt;/p&gt;  &lt;p&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Import-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;PoshLogger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;      &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Mylogger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-Logger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;Test 123&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-ConsoleLog&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-EventLog&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-RollingFileLog&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Folder&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; text-decoration: underline&#34;&gt;.\Logs&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Set-DefaultLogger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Logger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$MyLogger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;      &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Push-LogContext&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;My Context&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Log&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Message&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;Logging This To Many Various Target&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-LogLevel&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;INFO&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Pop-Location&lt;/span&gt;&lt;/p&gt;  
</description>
    </item>
    
  </channel>
</rss>
