<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Paul Cassidy Software Developer</title>
    <link>https://qawarrior.github.io/post/index.xml</link>
    <description>Recent content in Posts on Paul Cassidy Software Developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Paul H Cassidy</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PoshLogger 2.0 Now On Github</title>
      <link>https://qawarrior.github.io/2017/04/28/poshlogger-2.0-now-on-github</link>
      <pubDate>Fri, 28 Apr 2017 13:16:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2017/04/28/poshlogger-2.0-now-on-github</guid>
      <description></description>
    </item>
    
    <item>
      <title>Cmdline Reference Guide</title>
      <link>https://qawarrior.github.io/2017/04/17/cmdline-reference-guide</link>
      <pubDate>Mon, 17 Apr 2017 10:52:54 -0700</pubDate>
      
      <guid>https://qawarrior.github.io/2017/04/17/cmdline-reference-guide</guid>
      <description>

&lt;p&gt;Theses commands need to be found in the path environment variable.&lt;/p&gt;

&lt;h3 id=&#34;go-tool-commands&#34;&gt;Go Tool Commands&lt;/h3&gt;

&lt;p&gt;Ran from the root of the main package. &lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build package and all sub-packages - &lt;code&gt;go build -v ./...&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;git-commands&#34;&gt;Git Commands&lt;/h3&gt;

&lt;p&gt;Ran from root of git repository. &lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stage all files for commit - &lt;code&gt;git add --all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Commit to local repository - &lt;code&gt;git commit -m &amp;quot;message for commit&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Push to remote repository - &lt;code&gt;git push origin master&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;hugo-site-commands&#34;&gt;Hugo Site Commands&lt;/h3&gt;

&lt;p&gt;Ran from root of hugo site. &lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new hugo site template - &lt;code&gt;hugo new site &amp;quot;site name&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run Hugo development server - &lt;code&gt;hugo server --watch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Generate static site (defaults to ./public) - &lt;code&gt;hugo&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;mongodb-commands&#34;&gt;MongoDB Commands&lt;/h3&gt;

&lt;p&gt;Ran from the database root unless path is specified in command. &lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the server with path to database - &lt;code&gt;mongod --dbpath .\db&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>The Winner is ... Wait-Object</title>
      <link>https://qawarrior.github.io/2014/07/17/the-winner-is-...-wait-object</link>
      <pubDate>Thu, 17 Jul 2014 10:06:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/07/17/the-winner-is-...-wait-object</guid>
      <description>&lt;p&gt;I decided I like the for where is the object i was waiting for was returned, I would pass the InputObject on down the pipeline but if not Write-Error and return null. This allows me to 1. let the command run and do a null check on the return value to decide if the script should continue&lt;br /&gt;&lt;br /&gt;Example 1.&lt;br /&gt;$returned = $false | Wait-Object -ScriptBlock {Test-Path C:\Wait\For\Removal } -TimeOut 10&lt;br /&gt;&lt;br /&gt;if($returned -ne $null) {&lt;br /&gt;&amp;nbsp; #do something&lt;br /&gt;}&lt;br /&gt;else {&lt;br /&gt;&amp;nbsp; #do something else&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;Also this lets me use a try / catch &amp;nbsp;with the ErrorAction set to stop causing the the catch to trigger in event of failure.&lt;br /&gt;&lt;br /&gt;Example 2.&lt;br /&gt;try {&lt;br /&gt;&amp;nbsp; $returned = $false | Wait-Object -ScriptBlock {Test-Path C:\Wait\For\Removal } -TimeOut 10 -ErrorAction Stop&lt;br /&gt;}&lt;br /&gt;catch {&lt;br /&gt;&amp;nbsp; exit&lt;br /&gt;}&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Here is the Code: &lt;script src=&#34;https://gist.github.com/qawarrior/b9acc089f0b04d1a126b.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wait-Object Function Takes Place of Wait-ValueReturned</title>
      <link>https://qawarrior.github.io/2014/07/14/wait-object-function-takes-place-of-wait-valuereturned</link>
      <pubDate>Mon, 14 Jul 2014 10:42:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/07/14/wait-object-function-takes-place-of-wait-valuereturned</guid>
      <description>&lt;p&gt;I previously posted a function Wait-ValueReturned but is did not seem like it flowed with the rest of PowerShell so I re factored the code into Wait-Object but I am not sure about how the command should return. I have considered first return bool from the command to indicate success, which means the command will always return true or false. My other option is to return to object that was being waited on if success and return error record on fail. here is examples of both. Which makes more sense to use in a script&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;Returning Bool: &lt;script src=&#34;https://gist.github.com/qawarrior/b9acc089f0b04d1a126b.js&#34;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;Returning object or error: &lt;script src=&#34;https://gist.github.com/qawarrior/b9acc089f0b04d1a126b.js&#34;&gt;&lt;/script&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Utility Function Wait-ValueReturned</title>
      <link>https://qawarrior.github.io/2014/06/23/new-utility-function-wait-valuereturned</link>
      <pubDate>Mon, 23 Jun 2014 08:02:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/06/23/new-utility-function-wait-valuereturned</guid>
      <description>&lt;p&gt;I Just need a way to block a scripts execution while I wait on some command to return the correct value. So I created this little function to allow me to pass the command or commands and what i expect back and let it handle the work instead of littering my scripts main body with a bunch of loops, if / else, and sleeps, I can use this to encapsulate all that into a clean function.&lt;br&gt;&lt;script src=&#34;https://gist.github.com/qawarrior/01c58bbcec77b3465b2c.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell Objects - Import-Module Pt 3</title>
      <link>https://qawarrior.github.io/2014/06/11/powershell-objects---import-module-pt-3</link>
      <pubDate>Wed, 11 Jun 2014 14:37:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/06/11/powershell-objects---import-module-pt-3</guid>
      <description>&lt;p&gt;&lt;span style=&#34;font-family: Arial, Helvetica, sans-serif;&#34;&gt;The -AsCustomObject switch on the New-Module Cmdlet is also available in the Import-Module which opens up a whole new world of using PowerShell objects and modules. Imagine you need to import 2 modules to work with Hyper-V and VMWare in your script but after importing them in that order you notice that Get-VM for VMWare is visiable and the Get-VM command from the Hyper-v module is hidden. The are a couple of way to handle modules with command that are the same name. One would be to use the get-command command to invoke the correct command from the correct module. My perfered way is to use the -AsCustomObject switch when importing the modules. This way I hsave the modules and there commands neatly reference in variable so that it is easy to tell which module the command i am executng is going to run against. Example (sudo-code   module names may net be correct)&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: Arial, Helvetica, sans-serif;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;font-family: Arial, Helvetica, sans-serif;&#34;&gt;. &lt;script src=&#34;http://pastebin.com/embed_js.php?i=hPYzXnPA&#34;&gt;&lt;/script&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ISESteriods makes ISE Professional Scripting IDE</title>
      <link>https://qawarrior.github.io/2014/05/30/isesteriods-makes-ise-professional-scripting-ide</link>
      <pubDate>Fri, 30 May 2014 12:18:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/05/30/isesteriods-makes-ise-professional-scripting-ide</guid>
      <description></description>
    </item>
    
    <item>
      <title>PowerShell Talk at Silicon Valley Code Camp</title>
      <link>https://qawarrior.github.io/2014/05/29/powershell-talk-at-silicon-valley-code-camp</link>
      <pubDate>Thu, 29 May 2014 09:14:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/05/29/powershell-talk-at-silicon-valley-code-camp</guid>
      <description>&lt;p&gt;&lt;a href=&#39;http://www.siliconvalley-codecamp.com/Presenter/2014/Session/Paul-Cassidy-697&#39; target=&#39;_new&#39;   &gt;&lt;img title=&#39;I am speaking at silicon valley code camp. Please come to my session!  Click here for details and register if you are not already.&#39; alt=&#39;I am speaking at silicon valley code camp. Please come to my session!  Click here for details.&#39;   src=&#39;http://www.siliconvalley-codecamp.com/images/speaker01.jpg?w=250&#39; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Credential IO Script</title>
      <link>https://qawarrior.github.io/2014/05/29/credential-io-script</link>
      <pubDate>Thu, 29 May 2014 08:52:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/05/29/credential-io-script</guid>
      <description>&lt;p&gt;This is an updated version of the Import and Export Credential functions that store the creds in a json format versus the clixml format used by the original created by the guys @ powertips &amp;amp; powershell.com. I also store them in a known location and I use a string for a look up key to store and retrieve them. This allows me to use EFS to further secure the files on the drive. Enjoy!!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;http://pastebin.com/embed_js.php?i=6gZq24wX&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell Objects - New-Module Cmdlet Pt. 2</title>
      <link>https://qawarrior.github.io/2014/05/24/powershell-objects---new-module-cmdlet-pt.-2</link>
      <pubDate>Sat, 24 May 2014 19:28:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/05/24/powershell-objects---new-module-cmdlet-pt.-2</guid>
      <description>&lt;p&gt;If you remember Last we talked we had an Object with 4 Public NoteProperties, 1 Public ScriptMethod, and 1 private member. Now if we look at our ScriptMethod it returns a string unless -AsBool is passed, this can cause issues, like hindering ISE&#39;s ability to display Intellisense for the method / function because we are unable to decorate our function with the [OutputType] attribute.&lt;/p&gt;&lt;p&gt;&lt;img style=&#34;float: left;&#34; src=&#34;http://lh5.ggpht.com/-r-QeCTxUyuQ/U4FTSCPTshI/AAAAAAAAENk/iPaJesSwJd0/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;795&#34; height=&#34;137&#34; /&gt;&lt;/p&gt;&lt;p&gt;To correct this and make the code much more standardized i want to expose the IsPublished variable since it contains the boolean value indicating if the BlogPost has been published. Also notice that the value of the IsPublished value is being controlled by the object and that is important because we don&#39;t want someone or something else to come and set the value to false after we have successfully published the article to the web. So we need to set this Variable to be Read-Only, There are a couple of different ways to do this in PowerShell. First way is use the Set-Variable Cmdlet like so.&lt;/p&gt;&lt;p&gt;&lt;img style=&#34;float: left;&#34; src=&#34;http://lh3.ggpht.com/-AixXbCL7jus/U4FT4P3pX-I/AAAAAAAAEOE/ij4sXy29OWA/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;816&#34; height=&#34;169&#34; /&gt;&lt;/p&gt;&lt;p&gt;Lets run this code again and update the object that $BlogPostInfo contains a reference to and pipe it to Get-Member.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh4.ggpht.com/--LLiQ0CPnR0/U4FURIluAGI/AAAAAAAAEOM/LqyL6NBSldc/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;847&#34; height=&#34;438&#34; /&gt;&lt;/p&gt;&lt;p&gt;IsPublished is now listed as a Public NoteProperty and you can see we have retrieved its value, but what about setting it.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh6.ggpht.com/-TSE3OcddeBs/U4FUcQr_h8I/AAAAAAAAEOU/cCk5DG6Puo8/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;844&#34; height=&#34;201&#34; /&gt;&lt;/p&gt;&lt;p&gt;OK we see it&#39;s current value is set to $false and we receive and error when we try to set it&#39;s value with a simple assignment statement. So we are good to go, right, maybe lets see. first modify Get-PublishingStatus function so it has and empty param block and add the [OtutputType([System.String])] attribute between the Param block and the [CmdletBinding(PositionalBinding)] attribute, this lets ISE and other PS Editors and Tools what to expect a call to the function to return. Modify the Process block, remove the check for $AsBool and its surrounding context, leaving just a check to $this.IsPublished and returning the appropriate string value. The $this variable is a powershell automatic variable that references the current object, it is only available inside object body or a scriptblock. now we add a function definition for Publish-BlogPost that returns a bool on successful publishing, it also sets the IsPublished NoteProperty to $true since we are publishing the Post. Add the new function to the list of functions exported by the object.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh6.ggpht.com/-oHVVU2H2WTA/U4FUqz19rPI/AAAAAAAAEOc/lg4KCqy_1kY/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;849&#34; height=&#34;504&#34; /&gt;&lt;/p&gt;&lt;p&gt;Now we rerun the code to update our $BlogPostInfo variable with a reference to our newly modified object.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh5.ggpht.com/-NV4fROqy-gs/U4FUza2GMaI/AAAAAAAAEOk/AcUU3ntz5Jw/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;863&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;&lt;p&gt;OK as we can see IsPublished is $false then we call Publish-BlogPost() which appears to finish successfully but when we check IsPublished  again it is still $false, after looking a the $Error variable we see that an error happened when trying to update IsPublished Value it failed because it is ReadOnly which means that the value assigned to it cannot change after assignment, so that is not what we want. So like I said there are a couple of ways to get the desired behavior and interestingly enough they both involve using the same Cmdlet Add-Member. Keeping the code we have now and changing the Set-Variable call to a Add-Member call.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh3.ggpht.com/-6gPhG7aw7Kg/U4FU-bsc21I/AAAAAAAAEOs/UOsiq5jstNc/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;857&#34; height=&#34;149&#34; /&gt;&lt;/p&gt;&lt;p&gt;Running and Inspecting this code we find it works. IsPublished is now updated when the Publish-BlogPost method is called.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh5.ggpht.com/-ojPFjig3uOg/U4FVRsRtiJI/AAAAAAAAEO8/upc7mXGPW10/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;853&#34; height=&#34;130&#34; /&gt;&lt;/p&gt;&lt;p&gt;Awesome we have a ReadOnly NoteProperty, well no we don&#39;t because we did not update the member IsPublished we overwrote it&#39;s definition and replaced it with a new version that did not include the ReadOnly option so now the variable is free to be updated by any object, process, etc. Also another problem is that anytime we want to change its value we have to overwrite its implementation in memory and when overwriting (overriding) the member when need to define it exactly the same each time or run into issues of scoping and accessibility. Remember i said there was another way using add-member and it is to change the formal definition of the IsPublished member. I removed the current variable altogether. I pipe the object to Add-Member and add a script property that contains only a get scriptblock that returns $False and the modified the Publish-BlogPost Script Method to Call add-member and add the same script property but this tme it returns $True.&lt;/p&gt;&lt;script src=&#34;http://pastebin.com/embed_js.php?i=KvuK4tvU&#34;&gt;&lt;/script&gt;&lt;p&gt;Next Time will will talk of further uses of the New-Module Cmdlet pertaining to Object creation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell Object Creation – New-Module Pt. 1</title>
      <link>https://qawarrior.github.io/2014/05/20/powershell-object-creation--new-module-pt.-1</link>
      <pubDate>Tue, 20 May 2014 18:20:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/05/20/powershell-object-creation--new-module-pt.-1</guid>
      <description>&lt;p&gt;&lt;br /&gt;I have seen quite a few posts on creating custom objects in PowerShell, comparing it to techniques used in languages such as JavaScript but most use some variation of defining an object literal using Select-Object, New-Object, or a HashTable that is cast to PSCustomObject which are all fine and great ways of creating a one off Property Bag. These posts seem skip the most powerful way to define objects in PowerShell and that is to use the New-Module Cmdlet. The New-Module Cmdlet has a switch –AsCustomObject and a parameter –ScriptBlock that allow you to define a custom object. Inside the ScriptBlock every Variable defined is a property and you control whether it’s public or private by using the Export-ModuleMember Cmdlet if you export a variable it is public otherwise it is private. The most powerful part comes in the form that your functions defined inside the module ScriptBlock become the methods and the parameters define the methods arguments for the object and again the visibility is controlled by the Export-ModuleMember Cmdlet. The Functions can be Advanced Functions with Parameter Validation and Comment Based Help. Lets look at some code.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;http://pastebin.com/embed_js.php?i=1HFDnMVq&#34;&gt;&lt;/script&gt;&lt;br /&gt;&lt;br /&gt;Running this code will provide us with a local variable $BlogPostInfo that we can inspect. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;http://lh6.ggpht.com/-DkjLrcN6r6g/U3v_dNXe-JI/AAAAAAAAELE/_YlnCyIBj5c/s1600-h/Example.001%25255B3%25255D.jpg&#34;&gt;&lt;img alt=&#34;Example.001&#34; border=&#34;0&#34; src=&#34;http://lh3.ggpht.com/-1t3W2D5Av8w/U3v_d1Esh0I/AAAAAAAAELM/8KJVXnZILTE/Example.001_thumb%25255B1%25255D.jpg?imgmax=800&#34; height=&#34;323&#34; style=&#34;border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline;&#34; title=&#34;Example.001&#34; width=&#34;744&#34; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;We can see that the variable has the PSCustomObject type and are variable are now NoteProperties and our function is now a ScriptMethod. Also notice that our IsPublished variable is not included in the list because it is private, we did not export it. Next time we will cover some advanced topics such as defining ScriptProperties and method overriding.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;$Until_Then = Good-Times | Get-Command&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Project: PoshLogger</title>
      <link>https://qawarrior.github.io/2011/03/29/new-project-poshlogger</link>
      <pubDate>Tue, 29 Mar 2011 10:56:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/03/29/new-project-poshlogger</guid>
      <description>&lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;New on Codeplex @ &lt;a href=&#34;http://poshlogger.codeplex&#34;&gt;http://poshlogger.codeplex&lt;/a&gt; my project to create a good, easy, unified logger for powerShell scripts, and PowerShell applications. I started with a script that Joel Bennet posted on poshcode.org and next thing you know I had a simple logger that I have been using in my internal projects on a day to day basis. If your looking for a logger jump in and help create a really great Logging Experience in PowerShell. My thanks to Joel for the Idea and thanks to the log4net team for the object model. &lt;/p&gt;  &lt;p&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Import-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;PoshLogger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;      &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Mylogger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-Logger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;Test 123&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-ConsoleLog&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-EventLog&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-RollingFileLog&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Folder&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; text-decoration: underline&#34;&gt;.\Logs&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Set-DefaultLogger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Logger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$MyLogger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;      &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Push-LogContext&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;My Context&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Log&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Message&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;Logging This To Many Various Target&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-LogLevel&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;INFO&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Pop-Location&lt;/span&gt;&lt;/p&gt;  
</description>
    </item>
    
    <item>
      <title>Silicon Valley Code Camp 2011: PowerShell Types and Objects</title>
      <link>https://qawarrior.github.io/2011/03/29/silicon-valley-code-camp-2011-powershell-types-and-objects</link>
      <pubDate>Tue, 29 Mar 2011 09:38:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/03/29/silicon-valley-code-camp-2011-powershell-types-and-objects</guid>
      <description>&lt;p&gt;I will be speaking once again at SCCC on Powershell. here is the actual Session overview.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;h5&gt;PowerShell Types and Objects, Objects and Types. Oh My!&lt;/h5&gt;  &lt;p&gt;Level: Intermediate&amp;#160;&amp;#160; |&amp;#160;&amp;#160; Room: Unknown&lt;/p&gt;  &lt;p&gt;A look at the PowerShell Type System (ETS). PowerShell exposes a few primative Types for use but has a powerful dynamic engine called the Extensible Type System. We will discuss Primatives, Type Accelerators, PSObjects, .NET Types, WMI, ASDI, and the difference between a dynamic type and dynamic objects&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;a title=&#34;CodeCamp at FootHill College.  Click Here for Details and Registration&#34; href=&#34;http://www.SiliconValley-Codecamp.com&#34; target=&#34;_new&#34;&gt;&lt;img alt=&#34;CodeCamp at FootHill College.&#34; src=&#34;http://www.siliconvalley-codecamp.com/DisplayAd.ashx?ImageType=4&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;  
</description>
    </item>
    
    <item>
      <title>PowerShell Plus v4.0 Released! Oh Yeah!</title>
      <link>https://qawarrior.github.io/2011/03/14/powershell-plus-v4.0-released-oh-yeah</link>
      <pubDate>Mon, 14 Mar 2011 09:08:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/03/14/powershell-plus-v4.0-released-oh-yeah</guid>
      <description>&lt;p&gt;&lt;h3&gt;&amp;#160;&lt;/h3&gt;  &lt;p&gt;Advanced PowerShell development environment&lt;/p&gt;  &lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://www.idera.com/images/Products/ProdBox/HeroShot_PowershellPlus.gif&#34; /&gt;    &lt;br /&gt;Learn PowerShell fast, code PowerShell faster&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Learn PowerShell fast using the Interactive Learning Center &lt;/li&gt;    &lt;li&gt;Execute PowerShell quickly and accurately with the powerful interactive console &lt;/li&gt;    &lt;li&gt;Take advantage of the PowerShell remoting features directly from the interactive console &lt;/li&gt;    &lt;li&gt;Access hundreds of pre-loaded scripts in the personal QuickClick™ library &lt;/li&gt;    &lt;li&gt;Download thousands of community scripts from PowerShell.com, TechNet and PoshCode – directly from the PowerShell Plus console and editor &lt;/li&gt;    &lt;li&gt;Debug PowerShell 10x faster with the advanced script editor and easily share your scripts with the PowerShell community Code&lt;/li&gt; &lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Microsoft Agile Guidance: Visual Studio 2010</title>
      <link>https://qawarrior.github.io/2011/02/19/microsoft-agile-guidance-visual-studio-2010</link>
      <pubDate>Sat, 19 Feb 2011 19:01:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/02/19/microsoft-agile-guidance-visual-studio-2010</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://feedproxy.google.com/~r/ScrumLogJeffSutherland/~3/yGot-uVQPKw/microsoft-agile-guidance-visual-studio.html&#34;&gt;Microsoft Agile Guidance: Visual Studio 2010&lt;/a&gt;: &amp;ldquo;&lt;span style=&#34;font-family:&#39;Segoe UI&#39;, Verdana, Arial&#34;&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;h1 style=&#34;color:#3f529c;font-family:&#39;Segoe UI&#39;, Verdana, Arial;font-style:normal;font-variant:normal;font-weight:bold;line-height:normal;margin-bottom:10px;margin-left:0px;margin-right:0px;margin-top:0px&#34;&gt;&lt;span style=&#34;font-size:small&#34;&gt;Agile Principles and Values, by Jeff Sutherland&lt;/span&gt;&lt;/h1&gt;&lt;div style=&#34;margin-bottom:10px;margin-top:2px;padding-bottom:2px&#34;&gt;&lt;div style=&#34;color:#5d5d5d;float:left;padding-right:3px&#34;&gt;&lt;strong&gt;Microsoft Visual Studio 2010&lt;/strong&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;padding-top:5px&#34;&gt;&lt;div&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;Agile development is a term that was derived from the Agile Manifesto, which was written in 2001 by a group that included the creators of Scrum, Extreme Programming (XP), Dynamic Systems Development Method (DSDM), and Crystal; a representative of feature-driven development; and several other thought leaders in the software industry. The Agile Manifesto established a common set of overarching values and principles for all of the individual agile methodologies at the time. It details four core values for enabling high-performing teams.&lt;br /&gt;&lt;br /&gt;&lt;ul style=&#34;list-style-type:disc;margin-left:40px;padding-left:0px&#34;&gt;&lt;li&gt;Individuals and their interactions&lt;/li&gt;&lt;br /&gt;&lt;li&gt;Delivering working software&lt;/li&gt;&lt;br /&gt;&lt;li&gt;Customer collaboration&lt;/li&gt;&lt;br /&gt;&lt;li&gt;Responding to change&lt;/li&gt;&lt;br /&gt;&lt;/ul&gt;These core values are supported by 12 principles, which you can find at the following Web site: &lt;a href=&#34;http://go.microsoft.com/fwlink/?LinkId=161241&#34; style=&#34;color:#1364c4;text-decoration:none&#34;&gt;Manifesto for Agile Software Development&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;These values are not just something the creators of the Agile Manifesto intended to give lip service to and then forget. They are working values. Each individual agile methodology approaches these values in a slightly different way, but all of these methodologies have specific processes and practices that foster one or more of these values.&lt;/div&gt;&lt;div&gt;&lt;div style=&#34;margin-bottom:19px;margin-top:19px&#34;&gt;&lt;div&gt;&lt;a href=&#34;http://draft.blogger.com/post-create.g?blogID=3491762&#34; style=&#34;color:#1364c4;float:left;outline-color:initial;outline-style:none;outline-width:initial;text-decoration:none&#34; title=&#34;Collapse&#34;&gt;&lt;span style=&#34;background-color:initial;background-repeat:no-repeat no-repeat;border-color:initial;border-style:initial&#34;&gt;&lt;img src=&#34;http://i.msdn.microsoft.com/Hash/030c41d9079671d09a62d8e2c1db6973.gif&#34; style=&#34;background-color:initial;background-repeat:no-repeat no-repeat;border-bottom-width:0px;border-color:initial;border-left-width:0px;border-right-width:0px;border-style:initial;border-top-width:0px;float:left;height:9px;margin-top:12px;overflow-x:hidden;overflow-y:hidden;vertical-align:middle;width:9px&#34; /&gt;&lt;/span&gt;&lt;span style=&#34;color:#3f529c;font-family:&#39;Segoe UI&#39;, Verdana, Arial;font-weight:bold;padding-left:6px;word-break:break-all;word-wrap:break-word&#34;&gt;Individuals and Interactions&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;padding-top:12px&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;clear:both;display:block;padding-left:15px&#34;&gt;&lt;div&gt;Individuals and interactions are essential to high-performing teams. Studies of &amp;lsquo;communication saturation&amp;rsquo; during one project showed that, when no communication problems exist, teams can perform 50 times better than the industry average. To facilitate communication, agile methods rely on frequent inspect-and-adapt cycles. These cycles can range from every few minutes with pair programming, to every few hours with continuous integration, to every day with a daily standup meeting, to every iteration with a review and retrospective.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Just increasing the frequency of feedback and communication, however, is not enough to eliminate communication problems. These inspect-and-adapt cycles work well only when team members exhibit several key behaviors:&lt;/div&gt;&lt;ul style=&#34;list-style-type:disc;margin-left:40px;padding-left:0px&#34;&gt;&lt;li&gt;respect for the worth of every person&lt;/li&gt;&lt;br /&gt;&lt;li&gt;truth in every communication&lt;/li&gt;&lt;br /&gt;&lt;li&gt;transparency of all data, actions, and decisions&lt;/li&gt;&lt;br /&gt;&lt;li&gt;trust that each person will support the team&lt;/li&gt;&lt;br /&gt;&lt;li&gt;commitment to the team and to the team’s goals&lt;/li&gt;&lt;br /&gt;&lt;/ul&gt;&lt;div&gt;To foster these types of behavior, agile management must provide a supportive environment, team coaches must facilitate their inclusion, and team members must exhibit them. Only then can teams achieve their full potential.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Moving toward these types of behavior is more difficult than it might appear. Most teams avoid truth, transparency, and trust because of cultural norms or past negative experiences from conflict that was generated by honest communications. To combat these tendencies, leadership and team members must facilitate positive conflict. Doing so not only helps create productive behavior but also has several other benefits:&lt;/div&gt;&lt;ul style=&#34;list-style-type:disc;margin-left:40px;padding-left:0px&#34;&gt;&lt;li&gt;Process improvement depends on the team to generate a list of impediments or problems in the organization, to face them squarely, and then to systematically eliminate them in priority order.&lt;/li&gt;&lt;br /&gt;&lt;li&gt;Innovation occurs only with the free interchange of conflicting ideas, a phenomenon that was studied and documented by Takeuchi and Nonaka, the godfathers of Scrum.&lt;/li&gt;&lt;br /&gt;&lt;li&gt;Aligning the team toward a common goal requires the team to surface and resolve conflicting agendas.&lt;/li&gt;&lt;br /&gt;&lt;li&gt;Commitment to work together happens only when people agree on common goals and then struggle to improve both personally and as a team.&lt;/li&gt;&lt;br /&gt;&lt;/ul&gt;&lt;div&gt;This last bullet, about commitment, is especially important. It is only when individuals and teams are committed that they feel accountable for delivering high value, which is the bottom line for software development teams. Agile methodologies facilitate commitment by encouraging teams to pull from a prioritized work list, manage their own work, and focus on improving their work practices. This practice is the basis of self-organization, which is the driving force for achieving results in an agile team.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;To create high-performing teams, agile methodologies value individuals and interactions over processes and tools. Practically speaking, all of the agile methodologies seek to increase communication and collaboration through frequent inspect-and-adapt cycles. However, these cycles work only when agile leaders encourage the positive conflict that is needed to build a solid foundation of truth, transparency, trust, respect, and commitment on their agile teams.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&#34;margin-bottom:19px;margin-top:19px&#34;&gt;&lt;div&gt;&lt;a href=&#34;http://draft.blogger.com/post-create.g?blogID=3491762&#34; style=&#34;color:#1364c4;float:left;outline-color:initial;outline-style:none;outline-width:initial;text-decoration:none&#34; title=&#34;Collapse&#34;&gt;&lt;img src=&#34;http://i.msdn.microsoft.com/Hash/030c41d9079671d09a62d8e2c1db6973.gif&#34; style=&#34;background-color:initial;background-repeat:no-repeat no-repeat;border-bottom-width:0px;border-color:initial;border-left-width:0px;border-right-width:0px;border-style:initial;border-top-width:0px;float:left;height:9px;margin-top:12px;overflow-x:hidden;overflow-y:hidden;vertical-align:middle;width:9px&#34; /&gt;&lt;span style=&#34;color:#3f529c;font-family:&#39;Segoe UI&#39;, Verdana, Arial;font-weight:bold;padding-left:6px;word-break:break-all;word-wrap:break-word&#34;&gt;Working Software over Comprehensive Documentation&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;padding-top:12px&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;clear:both;display:block;padding-left:15px&#34;&gt;&lt;div&gt;Working software is one of the big differences that agile development brings. All of the agile methodologies that are represented in the Agile Manifesto stress delivering small pieces of working software to the customer at set intervals.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;All agile teams must establish what they mean when they say &amp;lsquo;working software,&amp;rsquo; which is frequently known as the definition of done. At a high level, a piece of functionality is complete only when its features pass all tests and can be operated by an end user. At a minimum, teams must go beyond the unit test level and test at the system level. The best teams also include integration testing, performance testing, and customer acceptance testing in their definition of what it means to be done with a piece of functionality.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;One CMMI Level 5 company has shown, through extensive data on many projects, that defining acceptance tests along with the feature, implementing features serially and in priority order, immediately running acceptance tests on each feature, and fixing any bugs that are identified as highest priority will systematically double the speed of production and reduce defects by 40 percent. This from a company that already has one of the lowest defect rates in the world.&lt;/div&gt;&lt;div&gt;The Agile Manifesto recommends that teams deliver working software at set intervals. Agreeing on a definition of done is one of the practical ways that agile teams bring about the high performance and high quality that is needed to accomplish this goal.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&#34;margin-bottom:19px;margin-top:19px&#34;&gt;&lt;div&gt;&lt;a href=&#34;http://draft.blogger.com/post-create.g?blogID=3491762&#34; style=&#34;color:#1364c4;float:left;outline-color:initial;outline-style:none;outline-width:initial;text-decoration:none&#34; title=&#34;Collapse&#34;&gt;&lt;img src=&#34;http://i.msdn.microsoft.com/Hash/030c41d9079671d09a62d8e2c1db6973.gif&#34; style=&#34;background-color:initial;background-repeat:no-repeat no-repeat;border-bottom-width:0px;border-color:initial;border-left-width:0px;border-right-width:0px;border-style:initial;border-top-width:0px;float:left;height:9px;margin-top:12px;overflow-x:hidden;overflow-y:hidden;vertical-align:middle;width:9px&#34; /&gt;&lt;span style=&#34;color:#3f529c;font-family:&#39;Segoe UI&#39;, Verdana, Arial;font-weight:bold;padding-left:6px;word-break:break-all;word-wrap:break-word&#34;&gt;Customer Collaboration over Contract Negotiation&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;padding-top:12px&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;clear:both;display:block;padding-left:15px&#34;&gt;&lt;div&gt;Over the past two decades, project success rates have more than doubled worldwide. This is attributed to smaller projects and frequent deliveries, which allow the customer to provide feedback on working software at regular intervals. The writers of the manifesto were clearly on to something when they stressed that getting the customer involved in the software development process is essential to success.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The agile methodologies foster this value by having a customer advocate work hand-in-hand with the development team. The first Scrum team, for example, had thousands of customers. Because it was not feasible to involve them all in product development, they selected a customer proxy, called a product owner, to represent not only all the customers in the field, but also management, sales, support, client services, and other stakeholders. The product owner was responsible for updating the list of requirements every four weeks as the team released working software, taking into account the current reality and actual feedback from customers and stakeholders. This allowed the customer to help shape the software that was being created.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The first XP team began with an internal IT project. They were able to have a company end user on their team work with them daily. About 10 percent of the time, consultancies and internal teams can find an end user who can work with the team on a day-to-day basis. The other 90 percent of the time, they must appoint a proxy. This customer proxy, whom XP teams call the customer, works with end users to provide a clear, prioritized list of features for developers to implement.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Collaborating with the customer (or customer proxy) on a daily basis is one of the key reasons why industry data shows that agile projects have more than twice the success rate of traditional projects on average worldwide. Agile methodologies recognize this and, as such, have created a place on their development teams that is specifically for the customer representative.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&#34;margin-bottom:19px;margin-top:19px&#34;&gt;&lt;div&gt;&lt;a href=&#34;http://draft.blogger.com/post-create.g?blogID=3491762&#34; style=&#34;color:#1364c4;float:left;outline-color:initial;outline-style:none;outline-width:initial;text-decoration:none&#34; title=&#34;Collapse&#34;&gt;&lt;img src=&#34;http://i.msdn.microsoft.com/Hash/030c41d9079671d09a62d8e2c1db6973.gif&#34; style=&#34;background-color:initial;background-repeat:no-repeat no-repeat;border-bottom-width:0px;border-color:initial;border-left-width:0px;border-right-width:0px;border-style:initial;border-top-width:0px;float:left;height:9px;margin-top:12px;overflow-x:hidden;overflow-y:hidden;vertical-align:middle;width:9px&#34; /&gt;&lt;span style=&#34;color:#3f529c;font-family:&#39;Segoe UI&#39;, Verdana, Arial;font-weight:bold;padding-left:6px;word-break:break-all;word-wrap:break-word&#34;&gt;Responding to Change over Following a Plan&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;padding-top:12px&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;clear:both;display:block;padding-left:15px&#34;&gt;&lt;div&gt;Responding to change is essential for creating a product that will please the customer and provide business value. Industry data shows that over 60 percent of product or project requirements change during the development of software. Even when traditional projects finish on time, on budget, with all features in the plan, customers are often unhappy because what they find is not exactly what they wanted. &amp;lsquo;Humphrey’s Law&amp;rsquo; says that customers never know what they want until they see working software. If customers do not see working software until the end of a project, it is too late to incorporate their feedback. Agile methodologies seek customer feedback throughout the project so that they can incorporate feedback and new information as the product is being developed.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;All agile methodologies have built-in processes to change their plans at regular intervals based on feedback from the customer or customer proxy. Their plans are designed to always deliver the highest business value first. Because 80 percent of the value is in 20 percent of the features, well-run agile projects tend to finish early, whereas most traditional projects finish late. As a result, customers are happier, and developers enjoy their work more. Agile methodologies are based on the knowledge that, in order to succeed, they must plan to change. That is why they have established processes, such as reviews and retrospectives, that are specifically designed to shift priorities regularly based on customer feedback and business value.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&#34;margin-bottom:19px;margin-top:19px&#34;&gt;&lt;div&gt;&lt;a href=&#34;http://draft.blogger.com/post-create.g?blogID=3491762&#34; style=&#34;color:#1364c4;float:left;outline-color:initial;outline-style:none;outline-width:initial;text-decoration:none&#34; title=&#34;Collapse&#34;&gt;&lt;img src=&#34;http://i.msdn.microsoft.com/Hash/030c41d9079671d09a62d8e2c1db6973.gif&#34; style=&#34;background-color:initial;background-repeat:no-repeat no-repeat;border-bottom-width:0px;border-color:initial;border-left-width:0px;border-right-width:0px;border-style:initial;border-top-width:0px;float:left;height:9px;margin-top:12px;overflow-x:hidden;overflow-y:hidden;vertical-align:middle;width:9px&#34; /&gt;&lt;span style=&#34;color:#3f529c;font-family:&#39;Segoe UI&#39;, Verdana, Arial;font-weight:bold;padding-left:6px;word-break:break-all;word-wrap:break-word&#34;&gt;Agile is an Umbrella – Methodologies are Implementations&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;padding-top:12px&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;clear:both;display:block;padding-left:15px&#34;&gt;&lt;div&gt;Agile development is not a methodology in itself. It is an umbrella term that describes several agile methodologies. At the signing of the Agile Manifesto in 2001, these methodologies included Scrum, XP, Crystal, FDD, and DSDM. Since then, Lean practices have also emerged as a valuable agile methodology and so are included under the agile development umbrella in the illustration later in this topic.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Each agile methodology has a slightly different approach for implementing the core values from the Agile Manifesto, just as many computer languages manifest the core features of object-oriented programming in different ways. A recent survey shows that about 50 percent of agile practitioners say that their team is doing Scrum. Another 20 percent say that they are doing Scrum with XP components. An additional 12 percent say that they are doing XP alone. Because more than 80 percent of agile implementations worldwide are Scrum or XP, MSF for Agile Software Development v5.0 focuses on the core processes and practices of Scrum and XP.&lt;/div&gt;&lt;img alt=&#34;The Agile Umbrella&#34; src=&#34;http://i.msdn.microsoft.com/dynimg/IC307329.png&#34; style=&#34;border-bottom-width:0px;border-color:initial;border-left-width:0px;border-right-width:0px;border-style:initial;border-top-width:0px&#34; title=&#34;The Agile Umbrella&#34; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div&gt;Scrum is a framework for agile development processes. It does not include specific engineering practices. Conversely, XP focuses on engineering practices but does not include an overarching framework of development processes. That does not mean that Scrum does not recommend certain engineering practices or that XP has no process. For example, the first Scrum implemented all of the engineering practices that are now known as XP. However, the Scrum framework for software development was designed to get a team started in two or three days, whereas engineering practices often take many months to implement. Therefore, it left the question of when (and whether) to implement specific practices up to each team. Scrum co-creators Jeff Sutherland and Ken Schwaber recommend that Scrum teams get started immediately and create a list of impediments and a process improvement plan. As engineering practices are identified as impediments, teams should look to XP practices as a way to improve. The best teams run Scrum supplemented with XP practices. Scrum helps XP to scale, and XP helps Scrum to work well.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;For more see &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/dd997578(VS.100).aspx&#34;&gt;Microsoft Visual Studio &amp;hellip;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;img width=&#34;1&#34; height=&#34;1&#34; src=&#34;https://blogger.googleusercontent.com/tracker/3491762-3939801879457882597?l=scrum.jeffsutherland.com&#34; alt=&#34;&#34; /&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;img src=&#34;http://feeds.feedburner.com/~r/ScrumLogJeffSutherland/~4/yGot-uVQPKw&#34; height=&#34;1&#34; width=&#34;1&#34; /&gt;&amp;ldquo;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
