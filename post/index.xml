<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Paul Cassidy Software Developer</title>
    <link>https://qawarrior.github.io/post/index.xml</link>
    <description>Recent content in Posts on Paul Cassidy Software Developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Paul H Cassidy</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Cmdline Reference Guide</title>
      <link>https://qawarrior.github.io/2017/04/17/cmdline-reference-guide</link>
      <pubDate>Mon, 17 Apr 2017 10:52:54 -0700</pubDate>
      
      <guid>https://qawarrior.github.io/2017/04/17/cmdline-reference-guide</guid>
      <description>

&lt;p&gt;Theses commands need to be found in the path environment variable.&lt;/p&gt;

&lt;h3 id=&#34;go-tool-commands&#34;&gt;Go Tool Commands&lt;/h3&gt;

&lt;p&gt;Ran from the root of the main package. &lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build package and all sub-packages - &lt;code&gt;go build -v ./...&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;git-commands&#34;&gt;Git Commands&lt;/h3&gt;

&lt;p&gt;Ran from root of git repository. &lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stage all files for commit - &lt;code&gt;git add --all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Commit to local repository - &lt;code&gt;git commit -m &amp;quot;message for commit&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Push to remote repository - &lt;code&gt;git push origin master&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;hugo-site-commands&#34;&gt;Hugo Site Commands&lt;/h3&gt;

&lt;p&gt;Ran from root of hugo site. &lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new hugo site template - &lt;code&gt;hugo new site &amp;quot;site name&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run Hugo development server - &lt;code&gt;hugo server --watch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Generate static site (defaults to ./public) - &lt;code&gt;hugo&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;mongodb-commands&#34;&gt;MongoDB Commands&lt;/h3&gt;

&lt;p&gt;Ran from the database root unless path is specified in command. &lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the server with path to database - &lt;code&gt;mongod --dbpath .\db&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Wait-Object Function Takes Place of Wait-ValueReturned</title>
      <link>https://qawarrior.github.io/2014/07/14/wait-object-function-takes-place-of-wait-valuereturned</link>
      <pubDate>Mon, 14 Jul 2014 10:42:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/07/14/wait-object-function-takes-place-of-wait-valuereturned</guid>
      <description>&lt;p&gt;I previously posted a function Wait-ValueReturned but is did not seem like it flowed with the rest of PowerShell so I re factored the code into Wait-Object but I am not sure about how the command should return. I have considered first return bool from the command to indicate success, which means the command will always return true or false. My other option is to return to object that was being waited on if success and return error record on fail. here is examples of both. Which makes more sense to use in a script&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;Returning Bool: &lt;script src=&#34;https://gist.github.com/qawarrior/b9acc089f0b04d1a126b.js&#34;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;Returning object or error: &lt;script src=&#34;https://gist.github.com/qawarrior/b9acc089f0b04d1a126b.js&#34;&gt;&lt;/script&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Credential IO Script</title>
      <link>https://qawarrior.github.io/2014/05/29/credential-io-script</link>
      <pubDate>Thu, 29 May 2014 08:52:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/05/29/credential-io-script</guid>
      <description>&lt;p&gt;This is an updated version of the Import and Export Credential functions that store the creds in a json format versus the clixml format used by the original created by the guys @ powertips &amp;amp; powershell.com. I also store them in a known location and I use a string for a look up key to store and retrieve them. This allows me to use EFS to further secure the files on the drive. Enjoy!!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;http://pastebin.com/embed_js.php?i=6gZq24wX&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Watching PS Vars for changes - Events</title>
      <link>https://qawarrior.github.io/2011/02/15/watching-ps-vars-for-changes---events</link>
      <pubDate>Tue, 15 Feb 2011 13:47:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/02/15/watching-ps-vars-for-changes---events</guid>
      <description>&lt;p&gt;I have a Testing framework built around Powershell and .net. In the framework there are a couple of main objects that their property values are assigned to Globals that are well known and used. The problem was I did not want to make them read only as this causes issues if reloading the framework and or trying to change paths. I needed a way to report back the value of a variable if it changes so i could keep the objects in sync. First I used Set-PSBreakPoint â€“Action to Check the value but it breaks before the value is set. Then I thought I need an Event but Powershell has limited native events. So I just started tweeting and thanks to @oising I finally have a solution. Here is a simple example that can be built upon. &lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;pre&gt;&lt;span style=&#34;color: #008000&#34;&gt;#Set value to a new variable&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$n&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;#set A break point to watch for any write actions to that variable&lt;br /&gt;#this will fire a new event VariableChanged&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$BP&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Set-PSBreakpoint&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Variable&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Mode&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;Write&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Action&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; {&lt;br /&gt;    &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;New-Event&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-SourceIdentifier&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;VariableChanged&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;#Now register to recieve the VariableChanged events&lt;br /&gt;#Here we just check the value of our variable and get its new value&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$EE&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Register-EngineEvent&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-SourceIdentifier&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;VariableChanged&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Action&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; {&lt;br /&gt;    &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$n&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-ForegroundColor&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;Yellow&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;#assign a new value to n and see the event fires&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$n&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;#do some cleanup&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-PSBreakpoint&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Remove-PSBreakpoint&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-EventSubscriber&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Unregister-Event&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Force&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-Event&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Remove-Event&lt;/span&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;Good-Times | Get-Command â€“:)&lt;/p&gt;  
</description>
    </item>
    
    <item>
      <title>Solved: Powershell fails as a functional language if commands are in modules.</title>
      <link>https://qawarrior.github.io/2011/01/04/solved-powershell-fails-as-a-functional-language-if-commands-are-in-modules.</link>
      <pubDate>Tue, 04 Jan 2011 14:13:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/01/04/solved-powershell-fails-as-a-functional-language-if-commands-are-in-modules.</guid>
      <description>&lt;p&gt;&lt;p&gt;The issue comes down to the scope that the scriptblock being passed into the function gets bound. In the original example the scriptblock was being bound to the callers scope which can not access anything in the module except what was imported into the scope. The fix turns out to be explicitly binding the scriptblock to the modules scope. See the fixed example below. Thanks go out to @Oisin for the fix.&lt;/p&gt;  &lt;pre&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;New-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;lsquo;&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;lsquo;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-ScriptBlock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; {&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000cd&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;                       [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;                       [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;scriptblock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               )&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000cd&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;                       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;                               [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;                       )&lt;br /&gt;                       &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               }&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Mod&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; ( &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Mod&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #8b4513&#34;&gt;NewBoundScriptBlock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;) )&lt;br /&gt;       }&lt;br /&gt;} &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Import-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Force&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Global&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;Paul&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; { &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; }&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Remove-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Force&lt;/span&gt;&lt;/pre&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Powershell fails as a functional language if commands are in modules.</title>
      <link>https://qawarrior.github.io/2011/01/04/powershell-fails-as-a-functional-language-if-commands-are-in-modules.</link>
      <pubDate>Tue, 04 Jan 2011 09:57:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/01/04/powershell-fails-as-a-functional-language-if-commands-are-in-modules.</guid>
      <description>&lt;p&gt;&lt;p&gt;I have some functions that contain functions. When I put the Functions in a .ps1 file and Dot Source directly the behave great but if those functions get imported in a module they fail to find the inner function with a CommandNotFound error. It does not matter if the functions are directly in a .psm1 file or if they are dot sourced by the .psm1 file they still fail to find the inner functions. Here are some code examples. Why is this? You can copy the below code into Powershell Console or ISE and run to see the errors.&lt;/p&gt;  &lt;pre&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;               [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;scriptblock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;       )&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000cd&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;                       [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               )&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;       }&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;Paul&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; { &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;New-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;lsquo;&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;lsquo;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-ScriptBlock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; {&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000cd&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;                       [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;                       [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;scriptblock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               )&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000cd&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;                       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;                               [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;                       )&lt;br /&gt;                       &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               }&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;       }&lt;br /&gt;} &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Import-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Force&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Global&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;Paul&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; { &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; }&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Save HTML as DOCX</title>
      <link>https://qawarrior.github.io/2010/09/10/save-html-as-docx</link>
      <pubDate>Fri, 10 Sep 2010 16:17:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2010/09/10/save-html-as-docx</guid>
      <description>&lt;blockquote&gt;   &lt;p&gt;the other day we had a need to save an HTML file as DOCX. We are creating the HTML file using ConvertT0-HTML. The file contains data that needs to be saved in SharePoint and needs to be editable by others. We decided to save as a DOCX because those in management all have WORD installed but don&#39;t have a&amp;#160; Dedicated HTML editor. So here is the Code Enjoy.&lt;/p&gt;    &lt;p&gt;!!! YOU MUST HAVE WORD 2007 or 2010 INSTALLED !!!!!&lt;/p&gt; &lt;/blockquote&gt;  &lt;blockquote&gt;   &lt;pre&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;ConvertTo&lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;DOCX&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;    &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$In&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Out&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;)&lt;br /&gt;    &lt;br /&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;#int the the enum returns for DOCX format&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$SaveAs&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;#Create WORD object and perform conversion&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Word&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;New-Object&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-ComObject&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #8b4513&#34;&gt;Word.Application&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$OpenDoc&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Word&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #8b4513&#34;&gt;Documents&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #8b4513&#34;&gt;Open&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$In&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;)&lt;br /&gt;    &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$OpenDoc&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #8b4513&#34;&gt;SaveAs&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Out&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$SaveAs&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;)&lt;br /&gt;    &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$OpenDoc&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #8b4513&#34;&gt;Close&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;()&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;#stop all WORD instances&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-Process&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Where-Object&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; { &lt;/span&gt;&lt;span style=&#34;color: #000080&#34;&gt;$_&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #8b4513&#34;&gt;Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;-eq&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;WINWORD&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; } &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Stop-Process&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Force&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/blockquote&gt;  
</description>
    </item>
    
    <item>
      <title>Get module Info for a Function in Powershell v2.0</title>
      <link>https://qawarrior.github.io/2010/01/03/get-module-info-for-a-function-in-powershell-v2.0</link>
      <pubDate>Sun, 03 Jan 2010 07:34:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2010/01/03/get-module-info-for-a-function-in-powershell-v2.0</guid>
      <description>&lt;pre&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;&lt;font color=&#34;#000000&#34;&gt;This one liner will return the the module info in a easy to consume format. The info includes the full path to the module that the function is defined in. Good Times and Get-Command!!!&lt;/font&gt;&lt;/span&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-Command&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-CommandType&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;Function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Control-FPService&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Select-Object&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-ExpandProperty&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Format-List&lt;/span&gt;&lt;/pre&gt;  
</description>
    </item>
    
    <item>
      <title>Testing for PowerShell Remoting: Test-PsRemoting</title>
      <link>https://qawarrior.github.io/2009/12/23/testing-for-powershell-remoting-test-psremoting</link>
      <pubDate>Wed, 23 Dec 2009 11:51:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2009/12/23/testing-for-powershell-remoting-test-psremoting</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.leeholmes.com/blog/TestingForPowerShellRemotingTestPsRemoting.aspx&#34;&gt;Testing for PowerShell Remoting: Test-PsRemoting&lt;/a&gt;: &amp;ldquo;&lt;br /&gt;&lt;br /&gt;When youâ€™re writing a script that depends on PowerShell Remoting, itâ€™s often helpful&lt;br /&gt;to know that the remoting channel is open and will support the activities of your&lt;br /&gt;script.&lt;br /&gt;PowerShell has a Test-WSMan command, but that only verifies that a WSMan connection&lt;br /&gt;is possible. There are other scenarios you could be impacted by:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Not having permission on the remote machine&lt;/li&gt;&lt;li&gt;Misconfiguration of the PowerShell endpoint&lt;/li&gt;&lt;li&gt;Corrupted installation&lt;/li&gt;&lt;li&gt;(etc)&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;As you dig deeper, you realize that the only way to really test the viability of the&lt;br /&gt;remoting channel is to just do something on it, and verify that you got the results&lt;br /&gt;you expected to. Since the implementation was so simple, we didnâ€™t write a cmdlet&lt;br /&gt;for it. In retrospect, the concept is more difficult than the implementation, so we&lt;br /&gt;probably should have written it anyways. Hereâ€™s an example function that tests the&lt;br /&gt;remoting connection to a specific machine.&lt;br /&gt;&lt;blockquote&gt;&lt;span style=&#34;color: darkblue; font-family: consolas; font-size: 10pt;&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: black; font-family: consolas; font-size: 10pt;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: blueviolet; font-family: consolas; font-size: 10pt;&#34;&gt;Test-PsRemoting&lt;/span&gt;&lt;span style=&#34;font-family: consolas; font-size: 10pt;&#34;&gt;&lt;span style=&#34;color: black;&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp; &lt;span style=&#34;color: darkblue;&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt;(&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp; &lt;span style=&#34;color: darkgrey;&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: lightblue;&#34;&gt;Parameter&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt;(Mandatory &lt;/span&gt;&lt;span style=&#34;color: darkgrey;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: orangered;&#34;&gt;$true&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: darkgrey;&#34;&gt;]&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp; &lt;span style=&#34;color: orangered;&#34;&gt;$computername&lt;/span&gt;&lt;br /&gt;&amp;nbsp; &lt;span style=&#34;color: black;&#34;&gt;)&lt;/span&gt;&lt;br /&gt;&amp;nbsp; &lt;span style=&#34;color: darkblue;&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp; &lt;span style=&#34;color: orangered;&#34;&gt;$errorActionPreference&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: darkgrey;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: darkred;&#34;&gt;&amp;ldquo;Stop&amp;rdquo;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp; &lt;span style=&#34;color: black;&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: orangered;&#34;&gt;$result&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: darkgrey;&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: blue;&#34;&gt;Invoke-Command&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: navy;&#34;&gt;-ComputerName&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: orangered;&#34;&gt;$computername&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt; { &lt;/span&gt;&lt;span style=&#34;color: purple;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt; }&lt;/span&gt;&lt;br /&gt;&amp;nbsp; &lt;span style=&#34;color: black;&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&amp;nbsp; &lt;span style=&#34;color: darkblue;&#34;&gt;catch&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp; &lt;span style=&#34;color: blue;&#34;&gt;Write-Verbose&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: orangered;&#34;&gt;$_&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp; &lt;span style=&#34;color: darkblue;&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: orangered;&#34;&gt;$false&lt;/span&gt;&lt;br /&gt;&amp;nbsp; &lt;span style=&#34;color: black;&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&amp;nbsp; &lt;span style=&#34;color: darkgreen;&#34;&gt;##I&amp;rsquo;ve never seen this happen, but if you want to be&lt;/span&gt;&lt;br /&gt;&amp;nbsp; &lt;span style=&#34;color: darkgreen;&#34;&gt;##thorough&amp;hellip;.&lt;/span&gt;&lt;br /&gt;&amp;nbsp; &lt;span style=&#34;color: darkblue;&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: orangered;&#34;&gt;$result&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: darkgrey;&#34;&gt;-ne&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: purple;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp; &lt;span style=&#34;color: blue;&#34;&gt;Write-Verbose&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: darkred;&#34;&gt;&amp;ldquo;Remoting to $computerName returned an unexpected result.&amp;rdquo;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp; &lt;span style=&#34;color: darkblue;&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: orangered;&#34;&gt;$false&lt;/span&gt;&lt;br /&gt;&amp;nbsp; &lt;span style=&#34;color: black;&#34;&gt;}&lt;/span&gt;&lt;br /&gt;&amp;nbsp; &lt;span style=&#34;color: orangered;&#34;&gt;$true&lt;/span&gt;&lt;span style=&#34;color: black;&#34;&gt;    &lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;color: black;&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;/blockquote&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
