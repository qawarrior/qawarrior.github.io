<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Paul Cassidy Software Developer</title>
    <link>https://qawarrior.github.io/post/index.xml</link>
    <description>Recent content in Posts on Paul Cassidy Software Developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Paul H Cassidy</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Cmdline Reference Guide</title>
      <link>https://qawarrior.github.io/2017/04/17/cmdline-reference-guide</link>
      <pubDate>Mon, 17 Apr 2017 10:52:54 -0700</pubDate>
      
      <guid>https://qawarrior.github.io/2017/04/17/cmdline-reference-guide</guid>
      <description>

&lt;p&gt;Theses commands need to be found in the path environment variable.&lt;/p&gt;

&lt;h3 id=&#34;go-tool-commands&#34;&gt;Go Tool Commands&lt;/h3&gt;

&lt;p&gt;Ran from the root of the main package. &lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build package and all sub-packages - &lt;code&gt;go build -v ./...&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;git-commands&#34;&gt;Git Commands&lt;/h3&gt;

&lt;p&gt;Ran from root of git repository. &lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stage all files for commit - &lt;code&gt;git add --all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Commit to local repository - &lt;code&gt;git commit -m &amp;quot;message for commit&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Push to remote repository - &lt;code&gt;git push origin master&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;hugo-site-commands&#34;&gt;Hugo Site Commands&lt;/h3&gt;

&lt;p&gt;Ran from root of hugo site. &lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new hugo site template - &lt;code&gt;hugo new site &amp;quot;site name&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run Hugo development server - &lt;code&gt;hugo server --watch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Generate static site (defaults to ./public) - &lt;code&gt;hugo&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;mongodb-commands&#34;&gt;MongoDB Commands&lt;/h3&gt;

&lt;p&gt;Ran from the database root unless path is specified in command. &lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the server with path to database - &lt;code&gt;mongod --dbpath .\db&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>The Winner is ... Wait-Object</title>
      <link>https://qawarrior.github.io/2014/07/17/the-winner-is-...-wait-object</link>
      <pubDate>Thu, 17 Jul 2014 10:06:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/07/17/the-winner-is-...-wait-object</guid>
      <description>&lt;p&gt;I decided I like the for where is the object i was waiting for was returned, I would pass the InputObject on down the pipeline but if not Write-Error and return null. This allows me to 1. let the command run and do a null check on the return value to decide if the script should continue&lt;br /&gt;&lt;br /&gt;Example 1.&lt;br /&gt;$returned = $false | Wait-Object -ScriptBlock {Test-Path C:\Wait\For\Removal } -TimeOut 10&lt;br /&gt;&lt;br /&gt;if($returned -ne $null) {&lt;br /&gt;&amp;nbsp; #do something&lt;br /&gt;}&lt;br /&gt;else {&lt;br /&gt;&amp;nbsp; #do something else&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;Also this lets me use a try / catch &amp;nbsp;with the ErrorAction set to stop causing the the catch to trigger in event of failure.&lt;br /&gt;&lt;br /&gt;Example 2.&lt;br /&gt;try {&lt;br /&gt;&amp;nbsp; $returned = $false | Wait-Object -ScriptBlock {Test-Path C:\Wait\For\Removal } -TimeOut 10 -ErrorAction Stop&lt;br /&gt;}&lt;br /&gt;catch {&lt;br /&gt;&amp;nbsp; exit&lt;br /&gt;}&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Here is the Code: &lt;script src=&#34;https://gist.github.com/qawarrior/b9acc089f0b04d1a126b.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wait-Object Function Takes Place of Wait-ValueReturned</title>
      <link>https://qawarrior.github.io/2014/07/14/wait-object-function-takes-place-of-wait-valuereturned</link>
      <pubDate>Mon, 14 Jul 2014 10:42:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/07/14/wait-object-function-takes-place-of-wait-valuereturned</guid>
      <description>&lt;p&gt;I previously posted a function Wait-ValueReturned but is did not seem like it flowed with the rest of PowerShell so I re factored the code into Wait-Object but I am not sure about how the command should return. I have considered first return bool from the command to indicate success, which means the command will always return true or false. My other option is to return to object that was being waited on if success and return error record on fail. here is examples of both. Which makes more sense to use in a script&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;Returning Bool: &lt;script src=&#34;https://gist.github.com/qawarrior/b9acc089f0b04d1a126b.js&#34;&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;Returning object or error: &lt;script src=&#34;https://gist.github.com/qawarrior/b9acc089f0b04d1a126b.js&#34;&gt;&lt;/script&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Utility Function Wait-ValueReturned</title>
      <link>https://qawarrior.github.io/2014/06/23/new-utility-function-wait-valuereturned</link>
      <pubDate>Mon, 23 Jun 2014 08:02:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/06/23/new-utility-function-wait-valuereturned</guid>
      <description>&lt;p&gt;I Just need a way to block a scripts execution while I wait on some command to return the correct value. So I created this little function to allow me to pass the command or commands and what i expect back and let it handle the work instead of littering my scripts main body with a bunch of loops, if / else, and sleeps, I can use this to encapsulate all that into a clean function.&lt;br&gt;&lt;script src=&#34;https://gist.github.com/qawarrior/01c58bbcec77b3465b2c.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell Talk at Silicon Valley Code Camp</title>
      <link>https://qawarrior.github.io/2014/05/29/powershell-talk-at-silicon-valley-code-camp</link>
      <pubDate>Thu, 29 May 2014 09:14:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/05/29/powershell-talk-at-silicon-valley-code-camp</guid>
      <description>&lt;p&gt;&lt;a href=&#39;http://www.siliconvalley-codecamp.com/Presenter/2014/Session/Paul-Cassidy-697&#39; target=&#39;_new&#39;   &gt;&lt;img title=&#39;I am speaking at silicon valley code camp. Please come to my session!  Click here for details and register if you are not already.&#39; alt=&#39;I am speaking at silicon valley code camp. Please come to my session!  Click here for details.&#39;   src=&#39;http://www.siliconvalley-codecamp.com/images/speaker01.jpg?w=250&#39; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Credential IO Script</title>
      <link>https://qawarrior.github.io/2014/05/29/credential-io-script</link>
      <pubDate>Thu, 29 May 2014 08:52:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/05/29/credential-io-script</guid>
      <description>&lt;p&gt;This is an updated version of the Import and Export Credential functions that store the creds in a json format versus the clixml format used by the original created by the guys @ powertips &amp;amp; powershell.com. I also store them in a known location and I use a string for a look up key to store and retrieve them. This allows me to use EFS to further secure the files on the drive. Enjoy!!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;http://pastebin.com/embed_js.php?i=6gZq24wX&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Project: PoshLogger</title>
      <link>https://qawarrior.github.io/2011/03/29/new-project-poshlogger</link>
      <pubDate>Tue, 29 Mar 2011 10:56:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/03/29/new-project-poshlogger</guid>
      <description>&lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;New on Codeplex @ &lt;a href=&#34;http://poshlogger.codeplex&#34;&gt;http://poshlogger.codeplex&lt;/a&gt; my project to create a good, easy, unified logger for powerShell scripts, and PowerShell applications. I started with a script that Joel Bennet posted on poshcode.org and next thing you know I had a simple logger that I have been using in my internal projects on a day to day basis. If your looking for a logger jump in and help create a really great Logging Experience in PowerShell. My thanks to Joel for the Idea and thanks to the log4net team for the object model. &lt;/p&gt;  &lt;p&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Import-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;PoshLogger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;      &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Mylogger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-Logger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;Test 123&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-ConsoleLog&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-EventLog&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-RollingFileLog&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Folder&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; text-decoration: underline&#34;&gt;.\Logs&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Set-DefaultLogger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Logger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$MyLogger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;      &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Push-LogContext&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;My Context&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Log&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Message&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;Logging This To Many Various Target&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-LogLevel&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;INFO&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Pop-Location&lt;/span&gt;&lt;/p&gt;  
</description>
    </item>
    
    <item>
      <title>Silicon Valley Code Camp 2011: PowerShell Types and Objects</title>
      <link>https://qawarrior.github.io/2011/03/29/silicon-valley-code-camp-2011-powershell-types-and-objects</link>
      <pubDate>Tue, 29 Mar 2011 09:38:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/03/29/silicon-valley-code-camp-2011-powershell-types-and-objects</guid>
      <description>&lt;p&gt;I will be speaking once again at SCCC on Powershell. here is the actual Session overview.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;h5&gt;PowerShell Types and Objects, Objects and Types. Oh My!&lt;/h5&gt;  &lt;p&gt;Level: Intermediate&amp;#160;&amp;#160; |&amp;#160;&amp;#160; Room: Unknown&lt;/p&gt;  &lt;p&gt;A look at the PowerShell Type System (ETS). PowerShell exposes a few primative Types for use but has a powerful dynamic engine called the Extensible Type System. We will discuss Primatives, Type Accelerators, PSObjects, .NET Types, WMI, ASDI, and the difference between a dynamic type and dynamic objects&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;a title=&#34;CodeCamp at FootHill College.  Click Here for Details and Registration&#34; href=&#34;http://www.SiliconValley-Codecamp.com&#34; target=&#34;_new&#34;&gt;&lt;img alt=&#34;CodeCamp at FootHill College.&#34; src=&#34;http://www.siliconvalley-codecamp.com/DisplayAd.ashx?ImageType=4&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;  
</description>
    </item>
    
    <item>
      <title>PowerShell Plus v4.0 Released! Oh Yeah!</title>
      <link>https://qawarrior.github.io/2011/03/14/powershell-plus-v4.0-released-oh-yeah</link>
      <pubDate>Mon, 14 Mar 2011 09:08:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/03/14/powershell-plus-v4.0-released-oh-yeah</guid>
      <description>&lt;p&gt;&lt;h3&gt;&amp;#160;&lt;/h3&gt;  &lt;p&gt;Advanced PowerShell development environment&lt;/p&gt;  &lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://www.idera.com/images/Products/ProdBox/HeroShot_PowershellPlus.gif&#34; /&gt;    &lt;br /&gt;Learn PowerShell fast, code PowerShell faster&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Learn PowerShell fast using the Interactive Learning Center &lt;/li&gt;    &lt;li&gt;Execute PowerShell quickly and accurately with the powerful interactive console &lt;/li&gt;    &lt;li&gt;Take advantage of the PowerShell remoting features directly from the interactive console &lt;/li&gt;    &lt;li&gt;Access hundreds of pre-loaded scripts in the personal QuickClick™ library &lt;/li&gt;    &lt;li&gt;Download thousands of community scripts from PowerShell.com, TechNet and PoshCode – directly from the PowerShell Plus console and editor &lt;/li&gt;    &lt;li&gt;Debug PowerShell 10x faster with the advanced script editor and easily share your scripts with the PowerShell community Code&lt;/li&gt; &lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Watching PS Vars for changes - Events</title>
      <link>https://qawarrior.github.io/2011/02/15/watching-ps-vars-for-changes---events</link>
      <pubDate>Tue, 15 Feb 2011 13:47:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/02/15/watching-ps-vars-for-changes---events</guid>
      <description>&lt;p&gt;I have a Testing framework built around Powershell and .net. In the framework there are a couple of main objects that their property values are assigned to Globals that are well know and used. The problem was I did not want to make them read only as this causes issues if reloading the framework and or trying to change paths. I needed a way to report back the value of a variable if it changes so i could keep the objects in sync. First I used Set-PSBreakPoint –Action to Check the value but it breaks before the value is set. Then I thought I need an Event but Powershell has limited native events. So I just started tweeting and thanks to @oising I finally have a solution. Here is a simple example that can be built upon. &lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;pre&gt;&lt;span style=&#34;color: #008000&#34;&gt;#Set value to a new variable&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$n&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;#set A break point to watch for any write actions to that variable&lt;br /&gt;#this will fire a new event VariableChanged&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$BP&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Set-PSBreakpoint&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Variable&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Mode&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;Write&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Action&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; {&lt;br /&gt;    &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;New-Event&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-SourceIdentifier&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;VariableChanged&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;#Now register to recieve the VariableChanged events&lt;br /&gt;#Here we just check the value of our variable and get its new value&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$EE&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Register-EngineEvent&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-SourceIdentifier&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;VariableChanged&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Action&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; {&lt;br /&gt;    &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$n&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-ForegroundColor&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;Yellow&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;#assign a new value to n and see the vent fires&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$n&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;#do some cleanup&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-PSBreakpoint&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Remove-PSBreakpoint&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-EventSubscriber&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Unregister-Event&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Force&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-Event&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Remove-Event&lt;/span&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;Good-Times | Get-Command –:)&lt;/p&gt;  
</description>
    </item>
    
    <item>
      <title>PowerShell Plus 4.0 beta</title>
      <link>https://qawarrior.github.io/2011/01/27/powershell-plus-4.0-beta</link>
      <pubDate>Thu, 27 Jan 2011 07:10:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/01/27/powershell-plus-4.0-beta</guid>
      <description>&lt;p&gt;Idera has released a Beta for the 4.0 version of Powershell Plus.&lt;/p&gt;  &lt;h4&gt;PowerShell Plus 4.0 beta introduces a completely redesigned UI so you can code faster, debug more easily and quickly access your favorite features.&lt;/h4&gt;  &lt;ul&gt;   &lt;li&gt;Redesigned UI puts the most used features at your finger tips &lt;/li&gt;    &lt;li&gt;Work more efficiently by customizing the UI to meet your specific needs &lt;/li&gt;    &lt;li&gt;New Start Page links to educational resources and a customizable news feed &lt;/li&gt;    &lt;li&gt;Syntax Error List helps you identify errors at a glance for faster debugging &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Register and Download it Here.&lt;/p&gt;  &lt;p&gt;&lt;a href=&#34;http://www.idera.com/Promo/PowerShell-Plus-Beta/?s=IderaEB&amp;amp;elq=18d2827c66294d559522a5a169ae6537&#34;&gt;Powershell Plus 4.0 Beta&lt;/a&gt;&lt;/p&gt;  
</description>
    </item>
    
    <item>
      <title>Solved: Powershell fails as a functional language if commands are in modules.</title>
      <link>https://qawarrior.github.io/2011/01/04/solved-powershell-fails-as-a-functional-language-if-commands-are-in-modules.</link>
      <pubDate>Tue, 04 Jan 2011 14:13:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/01/04/solved-powershell-fails-as-a-functional-language-if-commands-are-in-modules.</guid>
      <description>&lt;p&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;the issue comes down to the scope that the scriptblock being passed into the function gets bound. In the original example the scriptblock was being bound to the callers scope which can not access anything in the module except what was imported into the scope. The fix turns out to be explicitly binding the scriptblock to the modules scope. See the fixed example below. Thanks go out to @Oisin for the fix.&lt;/p&gt;  &lt;pre&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;New-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;lsquo;&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;lsquo;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-ScriptBlock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; {&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000cd&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;                       [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;                       [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;scriptblock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               )&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000cd&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;                       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;                               [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;                       )&lt;br /&gt;                       &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               }&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Mod&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; ( &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Mod&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #8b4513&#34;&gt;NewBoundScriptBlock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;) )&lt;br /&gt;       }&lt;br /&gt;} &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Import-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Force&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Global&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;Paul&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; { &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; }&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Remove-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Force&lt;/span&gt;&lt;/pre&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Powershell fails as a functional language if commands are in modules.</title>
      <link>https://qawarrior.github.io/2011/01/04/powershell-fails-as-a-functional-language-if-commands-are-in-modules.</link>
      <pubDate>Tue, 04 Jan 2011 09:57:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/01/04/powershell-fails-as-a-functional-language-if-commands-are-in-modules.</guid>
      <description>&lt;p&gt;&lt;p&gt;I have some functions that contain functions. When I put the Functions in a .ps1 file and Dot Source directly the behave great but if those functions get imported in a module they fail to find the inner function with a CommandNotFound error. It does not matter if the functions are directly in a .psm1 file or if they are dot sourced by the .psm1 file they still fail to find the inner functions. Here are some code examples. Why is this? You can copy the below code into Powershell Console or ISE and run to see the errors.&lt;/p&gt;  &lt;pre&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;               [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;scriptblock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;       )&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000cd&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;                       [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               )&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;       }&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;Paul&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; { &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;New-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;lsquo;&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;lsquo;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-ScriptBlock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; {&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000cd&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;                       [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;                       [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;scriptblock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               )&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000cd&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;                       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;                               [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;                       )&lt;br /&gt;                       &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               }&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;       }&lt;br /&gt;} &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Import-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Force&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Global&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;Paul&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; { &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; }&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Save HTML as DOCX</title>
      <link>https://qawarrior.github.io/2010/09/10/save-html-as-docx</link>
      <pubDate>Fri, 10 Sep 2010 16:17:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2010/09/10/save-html-as-docx</guid>
      <description>&lt;blockquote&gt;   &lt;p&gt;the other day we had a need to save an HTML file as DOCX. We are creating the HTML file using ConvertT0-HTML. The file contains data that needs to be saved in SharePoint and needs to be editable by others. We decided to save as a DOCX because those in management all have WORD installed but don&#39;t have a&amp;#160; Dedicated HTML editor. So here is the Code Enjoy.&lt;/p&gt;    &lt;p&gt;!!! YOU MUST HAVE WORD 2007 or 2010 INSTALLED !!!!!&lt;/p&gt; &lt;/blockquote&gt;  &lt;blockquote&gt;   &lt;pre&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;ConvertTo&lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;DOCX&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;    &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$In&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Out&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;)&lt;br /&gt;    &lt;br /&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;#int the the enum returns for DOCX format&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$SaveAs&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;#Create WORD object and perform conversion&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Word&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;New-Object&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-ComObject&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #8b4513&#34;&gt;Word.Application&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$OpenDoc&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Word&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #8b4513&#34;&gt;Documents&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #8b4513&#34;&gt;Open&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$In&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;)&lt;br /&gt;    &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$OpenDoc&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #8b4513&#34;&gt;SaveAs&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Out&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$SaveAs&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;)&lt;br /&gt;    &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$OpenDoc&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #8b4513&#34;&gt;Close&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;()&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;#stop all WORD instances&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-Process&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Where-Object&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; { &lt;/span&gt;&lt;span style=&#34;color: #000080&#34;&gt;$_&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #8b4513&#34;&gt;Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;-eq&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;WINWORD&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; } &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Stop-Process&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Force&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/blockquote&gt;  
</description>
    </item>
    
    <item>
      <title>5th Silicon Valley Code Camp Oct 9th and 10th 2010</title>
      <link>https://qawarrior.github.io/2010/05/17/5th-silicon-valley-code-camp-oct-9th-and-10th-2010</link>
      <pubDate>Mon, 17 May 2010 10:16:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2010/05/17/5th-silicon-valley-code-camp-oct-9th-and-10th-2010</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.SiliconValley-Codecamp.com&#34;&gt;&lt;img alt=&#34;CodeCamp at FootHill College.  Click Here for Details and Registration&#34; src=&#34;http://www.siliconvalley-codecamp.com/DisplayAd.ashx?ImageType=4&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;I will be giving a session “Advanced Scripting with Powershell” and My co-worker SPowser will be doiing “Powershell Modules” come and enjoy, Its free and lunch is provided. It will only cost you a weekend but why not hang with geeks and further you knowledge.&lt;/p&gt;  
</description>
    </item>
    
  </channel>
</rss>
