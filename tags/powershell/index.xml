<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Powershell on Paul Cassidy Software Developer</title>
    <link>https://qawarrior.github.io/tags/powershell/index.xml</link>
    <description>Recent content in Powershell on Paul Cassidy Software Developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Paul H Cassidy</copyright>
    <atom:link href="/tags/powershell/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PSLogger</title>
      <link>https://qawarrior.github.io/project/pslogger-github/</link>
      <pubDate>Thu, 30 Mar 2017 09:28:05 -0700</pubDate>
      
      <guid>https://qawarrior.github.io/project/pslogger-github/</guid>
      <description></description>
    </item>
    
    <item>
      <title>PSWebdriver</title>
      <link>https://qawarrior.github.io/project/pswebdriver-github/</link>
      <pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/project/pswebdriver-github/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Credential IO Script</title>
      <link>https://qawarrior.github.io/2014/05/29/credential-io-script</link>
      <pubDate>Thu, 29 May 2014 08:52:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/05/29/credential-io-script</guid>
      <description>&lt;p&gt;This is an updated version of the Import and Export Credential functions that store the creds in a json format versus the clixml format used by the original created by the guys @ powertips &amp;amp; powershell.com. I also store them in a known location and I use a string for a look up key to store and retrieve them. This allows me to use EFS to further secure the files on the drive. Enjoy!!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;http://pastebin.com/embed_js.php?i=6gZq24wX&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Watching PS Vars for changes - Events</title>
      <link>https://qawarrior.github.io/2011/02/15/watching-ps-vars-for-changes---events</link>
      <pubDate>Tue, 15 Feb 2011 13:47:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/02/15/watching-ps-vars-for-changes---events</guid>
      <description>&lt;p&gt;I have a Testing framework built around Powershell and .net. In the framework there are a couple of main objects that their property values are assigned to Globals that are well known and used. The problem was I did not want to make them read only as this causes issues if reloading the framework and or trying to change paths. I needed a way to report back the value of a variable if it changes so i could keep the objects in sync. First I used Set-PSBreakPoint –Action to Check the value but it breaks before the value is set. Then I thought I need an Event but Powershell has limited native events. So I just started tweeting and thanks to @oising I finally have a solution. Here is a simple example that can be built upon. &lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;pre&gt;&lt;span style=&#34;color: #008000&#34;&gt;#Set value to a new variable&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$n&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;#set A break point to watch for any write actions to that variable&lt;br /&gt;#this will fire a new event VariableChanged&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$BP&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Set-PSBreakpoint&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Variable&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Mode&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;Write&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Action&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; {&lt;br /&gt;    &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;New-Event&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-SourceIdentifier&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;VariableChanged&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;#Now register to recieve the VariableChanged events&lt;br /&gt;#Here we just check the value of our variable and get its new value&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$EE&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Register-EngineEvent&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-SourceIdentifier&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;VariableChanged&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Action&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; {&lt;br /&gt;    &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$n&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-ForegroundColor&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;Yellow&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;#assign a new value to n and see the event fires&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$n&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;#do some cleanup&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-PSBreakpoint&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Remove-PSBreakpoint&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-EventSubscriber&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Unregister-Event&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Force&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-Event&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Remove-Event&lt;/span&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;Good-Times | Get-Command –:)&lt;/p&gt;  
</description>
    </item>
    
    <item>
      <title>Solved: Powershell fails as a functional language if commands are in modules.</title>
      <link>https://qawarrior.github.io/2011/01/04/solved-powershell-fails-as-a-functional-language-if-commands-are-in-modules.</link>
      <pubDate>Tue, 04 Jan 2011 14:13:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/01/04/solved-powershell-fails-as-a-functional-language-if-commands-are-in-modules.</guid>
      <description>&lt;p&gt;&lt;p&gt;The issue comes down to the scope that the scriptblock being passed into the function gets bound. In the original example the scriptblock was being bound to the callers scope which can not access anything in the module except what was imported into the scope. The fix turns out to be explicitly binding the scriptblock to the modules scope. See the fixed example below. Thanks go out to @Oisin for the fix.&lt;/p&gt;  &lt;pre&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;New-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;lsquo;&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;lsquo;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-ScriptBlock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; {&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000cd&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;                       [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;                       [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;scriptblock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               )&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000cd&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;                       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;                               [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;                       )&lt;br /&gt;                       &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               }&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Mod&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; ( &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Mod&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #8b4513&#34;&gt;NewBoundScriptBlock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;) )&lt;br /&gt;       }&lt;br /&gt;} &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Import-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Force&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Global&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;Paul&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; { &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; }&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Remove-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Force&lt;/span&gt;&lt;/pre&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Powershell fails as a functional language if commands are in modules.</title>
      <link>https://qawarrior.github.io/2011/01/04/powershell-fails-as-a-functional-language-if-commands-are-in-modules.</link>
      <pubDate>Tue, 04 Jan 2011 09:57:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/01/04/powershell-fails-as-a-functional-language-if-commands-are-in-modules.</guid>
      <description>&lt;p&gt;&lt;p&gt;I have some functions that contain functions. When I put the Functions in a .ps1 file and Dot Source directly the behave great but if those functions get imported in a module they fail to find the inner function with a CommandNotFound error. It does not matter if the functions are directly in a .psm1 file or if they are dot sourced by the .psm1 file they still fail to find the inner functions. Here are some code examples. Why is this? You can copy the below code into Powershell Console or ISE and run to see the errors.&lt;/p&gt;  &lt;pre&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;               [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;scriptblock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;       )&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000cd&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;                       [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               )&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;       }&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;Paul&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; { &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;New-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;lsquo;&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;lsquo;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-ScriptBlock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; {&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000cd&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;                       [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;                       [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;scriptblock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               )&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000cd&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;                       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;                               [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;                       )&lt;br /&gt;                       &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               }&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;       }&lt;br /&gt;} &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Import-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Force&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Global&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;Paul&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; { &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; }&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
