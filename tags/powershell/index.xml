<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Powershell on Paul Cassidy Software Developer</title>
    <link>https://qawarrior.github.io/tags/powershell/index.xml</link>
    <description>Recent content in Powershell on Paul Cassidy Software Developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Paul H Cassidy</copyright>
    <atom:link href="/tags/powershell/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PoshLogger 2.0 Now On Github</title>
      <link>https://qawarrior.github.io/2017/04/28/poshlogger-2.0-now-on-github</link>
      <pubDate>Fri, 28 Apr 2017 13:16:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2017/04/28/poshlogger-2.0-now-on-github</guid>
      <description></description>
    </item>
    
    <item>
      <title>PSLogger</title>
      <link>https://qawarrior.github.io/project/pslogger-github/</link>
      <pubDate>Thu, 30 Mar 2017 09:28:05 -0700</pubDate>
      
      <guid>https://qawarrior.github.io/project/pslogger-github/</guid>
      <description></description>
    </item>
    
    <item>
      <title>PSWebdriver</title>
      <link>https://qawarrior.github.io/project/pswebdriver-github/</link>
      <pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/project/pswebdriver-github/</guid>
      <description></description>
    </item>
    
    <item>
      <title>PowerShell Objects - Import-Module Pt 3</title>
      <link>https://qawarrior.github.io/2014/06/11/powershell-objects---import-module-pt-3</link>
      <pubDate>Wed, 11 Jun 2014 14:37:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/06/11/powershell-objects---import-module-pt-3</guid>
      <description>&lt;p&gt;&lt;span style=&#34;font-family: Arial, Helvetica, sans-serif;&#34;&gt;The -AsCustomObject switch on the New-Module Cmdlet is also available in the Import-Module which opens up a whole new world of using PowerShell objects and modules. Imagine you need to import 2 modules to work with Hyper-V and VMWare in your script but after importing them in that order you notice that Get-VM for VMWare is visiable and the Get-VM command from the Hyper-v module is hidden. The are a couple of way to handle modules with command that are the same name. One would be to use the get-command command to invoke the correct command from the correct module. My perfered way is to use the -AsCustomObject switch when importing the modules. This way I hsave the modules and there commands neatly reference in variable so that it is easy to tell which module the command i am executng is going to run against. Example (sudo-code   module names may net be correct)&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: Arial, Helvetica, sans-serif;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;font-family: Arial, Helvetica, sans-serif;&#34;&gt;. &lt;script src=&#34;http://pastebin.com/embed_js.php?i=hPYzXnPA&#34;&gt;&lt;/script&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ISESteriods makes ISE Professional Scripting IDE</title>
      <link>https://qawarrior.github.io/2014/05/30/isesteriods-makes-ise-professional-scripting-ide</link>
      <pubDate>Fri, 30 May 2014 12:18:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/05/30/isesteriods-makes-ise-professional-scripting-ide</guid>
      <description></description>
    </item>
    
    <item>
      <title>Credential IO Script</title>
      <link>https://qawarrior.github.io/2014/05/29/credential-io-script</link>
      <pubDate>Thu, 29 May 2014 08:52:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/05/29/credential-io-script</guid>
      <description>&lt;p&gt;This is an updated version of the Import and Export Credential functions that store the creds in a json format versus the clixml format used by the original created by the guys @ powertips &amp;amp; powershell.com. I also store them in a known location and I use a string for a look up key to store and retrieve them. This allows me to use EFS to further secure the files on the drive. Enjoy!!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;http://pastebin.com/embed_js.php?i=6gZq24wX&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell Objects - New-Module Cmdlet Pt. 2</title>
      <link>https://qawarrior.github.io/2014/05/24/powershell-objects---new-module-cmdlet-pt.-2</link>
      <pubDate>Sat, 24 May 2014 19:28:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/05/24/powershell-objects---new-module-cmdlet-pt.-2</guid>
      <description>&lt;p&gt;If you remember Last we talked we had an Object with 4 Public NoteProperties, 1 Public ScriptMethod, and 1 private member. Now if we look at our ScriptMethod it returns a string unless -AsBool is passed, this can cause issues, like hindering ISE&#39;s ability to display Intellisense for the method / function because we are unable to decorate our function with the [OutputType] attribute.&lt;/p&gt;&lt;p&gt;&lt;img style=&#34;float: left;&#34; src=&#34;http://lh5.ggpht.com/-r-QeCTxUyuQ/U4FTSCPTshI/AAAAAAAAENk/iPaJesSwJd0/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;795&#34; height=&#34;137&#34; /&gt;&lt;/p&gt;&lt;p&gt;To correct this and make the code much more standardized i want to expose the IsPublished variable since it contains the boolean value indicating if the BlogPost has been published. Also notice that the value of the IsPublished value is being controlled by the object and that is important because we don&#39;t want someone or something else to come and set the value to false after we have successfully published the article to the web. So we need to set this Variable to be Read-Only, There are a couple of different ways to do this in PowerShell. First way is use the Set-Variable Cmdlet like so.&lt;/p&gt;&lt;p&gt;&lt;img style=&#34;float: left;&#34; src=&#34;http://lh3.ggpht.com/-AixXbCL7jus/U4FT4P3pX-I/AAAAAAAAEOE/ij4sXy29OWA/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;816&#34; height=&#34;169&#34; /&gt;&lt;/p&gt;&lt;p&gt;Lets run this code again and update the object that $BlogPostInfo contains a reference to and pipe it to Get-Member.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh4.ggpht.com/--LLiQ0CPnR0/U4FURIluAGI/AAAAAAAAEOM/LqyL6NBSldc/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;847&#34; height=&#34;438&#34; /&gt;&lt;/p&gt;&lt;p&gt;IsPublished is now listed as a Public NoteProperty and you can see we have retrieved its value, but what about setting it.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh6.ggpht.com/-TSE3OcddeBs/U4FUcQr_h8I/AAAAAAAAEOU/cCk5DG6Puo8/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;844&#34; height=&#34;201&#34; /&gt;&lt;/p&gt;&lt;p&gt;OK we see it&#39;s current value is set to $false and we receive and error when we try to set it&#39;s value with a simple assignment statement. So we are good to go, right, maybe lets see. first modify Get-PublishingStatus function so it has and empty param block and add the [OtutputType([System.String])] attribute between the Param block and the [CmdletBinding(PositionalBinding)] attribute, this lets ISE and other PS Editors and Tools what to expect a call to the function to return. Modify the Process block, remove the check for $AsBool and its surrounding context, leaving just a check to $this.IsPublished and returning the appropriate string value. The $this variable is a powershell automatic variable that references the current object, it is only available inside object body or a scriptblock. now we add a function definition for Publish-BlogPost that returns a bool on successful publishing, it also sets the IsPublished NoteProperty to $true since we are publishing the Post. Add the new function to the list of functions exported by the object.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh6.ggpht.com/-oHVVU2H2WTA/U4FUqz19rPI/AAAAAAAAEOc/lg4KCqy_1kY/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;849&#34; height=&#34;504&#34; /&gt;&lt;/p&gt;&lt;p&gt;Now we rerun the code to update our $BlogPostInfo variable with a reference to our newly modified object.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh5.ggpht.com/-NV4fROqy-gs/U4FUza2GMaI/AAAAAAAAEOk/AcUU3ntz5Jw/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;863&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;&lt;p&gt;OK as we can see IsPublished is $false then we call Publish-BlogPost() which appears to finish successfully but when we check IsPublished Â again it is still $false, after looking a the $Error variable we see that an error happened when trying to update IsPublished Value it failed because it is ReadOnly which means that the value assigned to it cannot change after assignment, so that is not what we want. So like I said there are a couple of ways to get the desired behavior and interestingly enough they both involve using the same Cmdlet Add-Member. Keeping the code we have now and changing the Set-Variable call to a Add-Member call.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh3.ggpht.com/-6gPhG7aw7Kg/U4FU-bsc21I/AAAAAAAAEOs/UOsiq5jstNc/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;857&#34; height=&#34;149&#34; /&gt;&lt;/p&gt;&lt;p&gt;Running and Inspecting this code we find it works. IsPublished is now updated when the Publish-BlogPost method is called.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh5.ggpht.com/-ojPFjig3uOg/U4FVRsRtiJI/AAAAAAAAEO8/upc7mXGPW10/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;853&#34; height=&#34;130&#34; /&gt;&lt;/p&gt;&lt;p&gt;Awesome we have a ReadOnly NoteProperty, well no we don&#39;t because we did not update the member IsPublished we overwrote it&#39;s definition and replaced it with a new version that did not include the ReadOnly option so now the variable is free to be updated by any object, process, etc. Also another problem is that anytime we want to change its value we have to overwrite its implementation in memory and when overwriting (overriding) the member when need to define it exactly the same each time or run into issues of scoping and accessibility. Remember i said there was another way using add-member and it is to change the formal definition of the IsPublished member. I removed the current variable altogether. I pipe the object to Add-Member and add a script property that contains only a get scriptblock that returns $False and the modified the Publish-BlogPost Script Method to Call add-member and add the same script property but this tme it returns $True.&lt;/p&gt;&lt;script src=&#34;http://pastebin.com/embed_js.php?i=KvuK4tvU&#34;&gt;&lt;/script&gt;&lt;p&gt;Next Time will will talk of further uses of the New-Module Cmdlet pertaining to Object creation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell Object Creation â New-Module Pt. 1</title>
      <link>https://qawarrior.github.io/2014/05/20/powershell-object-creation--new-module-pt.-1</link>
      <pubDate>Tue, 20 May 2014 18:20:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/05/20/powershell-object-creation--new-module-pt.-1</guid>
      <description>&lt;p&gt;&lt;br /&gt;I have seen quite a few posts on creating custom objects in PowerShell, comparing it to techniques used in languages such as JavaScript but most use some variation of defining an object literal using Select-Object, New-Object, or a HashTable that is cast to PSCustomObject which are all fine and great ways of creating a one off Property Bag. These posts seem skip the most powerful way to define objects in PowerShell and that is to use the New-Module Cmdlet. The New-Module Cmdlet has a switch âAsCustomObject and a parameter âScriptBlock that allow you to define a custom object. Inside the ScriptBlock every Variable defined is a property and you control whether itâs public or private by using the Export-ModuleMember Cmdlet if you export a variable it is public otherwise it is private. The most powerful part comes in the form that your functions defined inside the module ScriptBlock become the methods and the parameters define the methods arguments for the object and again the visibility is controlled by the Export-ModuleMember Cmdlet. The Functions can be Advanced Functions with Parameter Validation and Comment Based Help. Lets look at some code.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;http://pastebin.com/embed_js.php?i=1HFDnMVq&#34;&gt;&lt;/script&gt;&lt;br /&gt;&lt;br /&gt;Running this code will provide us with a local variable $BlogPostInfo that we can inspect. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;http://lh6.ggpht.com/-DkjLrcN6r6g/U3v_dNXe-JI/AAAAAAAAELE/_YlnCyIBj5c/s1600-h/Example.001%25255B3%25255D.jpg&#34;&gt;&lt;img alt=&#34;Example.001&#34; border=&#34;0&#34; src=&#34;http://lh3.ggpht.com/-1t3W2D5Av8w/U3v_d1Esh0I/AAAAAAAAELM/8KJVXnZILTE/Example.001_thumb%25255B1%25255D.jpg?imgmax=800&#34; height=&#34;323&#34; style=&#34;border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline;&#34; title=&#34;Example.001&#34; width=&#34;744&#34; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;We can see that the variable has the PSCustomObject type and are variable are now NoteProperties and our function is now a ScriptMethod. Also notice that our IsPublished variable is not included in the list because it is private, we did not export it. Next time we will cover some advanced topics such as defining ScriptProperties and method overriding.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;$Until_Then = Good-Times | Get-Command&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Project: PoshLogger</title>
      <link>https://qawarrior.github.io/2011/03/29/new-project-poshlogger</link>
      <pubDate>Tue, 29 Mar 2011 10:56:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/03/29/new-project-poshlogger</guid>
      <description>&lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;New on Codeplex @ &lt;a href=&#34;http://poshlogger.codeplex&#34;&gt;http://poshlogger.codeplex&lt;/a&gt; my project to create a good, easy, unified logger for powerShell scripts, and PowerShell applications. I started with a script that Joel Bennet posted on poshcode.org and next thing you know I had a simple logger that I have been using in my internal projects on a day to day basis. If your looking for a logger jump in and help create a really great Logging Experience in PowerShell. My thanks to Joel for the Idea and thanks to the log4net team for the object model. &lt;/p&gt;  &lt;p&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Import-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;PoshLogger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;      &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Mylogger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-Logger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;Test 123&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-ConsoleLog&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-EventLog&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-RollingFileLog&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Folder&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; text-decoration: underline&#34;&gt;.\Logs&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Set-DefaultLogger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Logger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$MyLogger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;      &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Push-LogContext&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;My Context&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Log&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Message&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;Logging This To Many Various Target&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-LogLevel&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;INFO&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Pop-Location&lt;/span&gt;&lt;/p&gt;  
</description>
    </item>
    
    <item>
      <title>PowerShell Plus v4.0 Released! Oh Yeah!</title>
      <link>https://qawarrior.github.io/2011/03/14/powershell-plus-v4.0-released-oh-yeah</link>
      <pubDate>Mon, 14 Mar 2011 09:08:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/03/14/powershell-plus-v4.0-released-oh-yeah</guid>
      <description>&lt;p&gt;&lt;h3&gt;&amp;#160;&lt;/h3&gt;  &lt;p&gt;Advanced PowerShell development environment&lt;/p&gt;  &lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://www.idera.com/images/Products/ProdBox/HeroShot_PowershellPlus.gif&#34; /&gt;    &lt;br /&gt;Learn PowerShell fast, code PowerShell faster&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Learn PowerShell fast using the Interactive Learning Center &lt;/li&gt;    &lt;li&gt;Execute PowerShell quickly and accurately with the powerful interactive console &lt;/li&gt;    &lt;li&gt;Take advantage of the PowerShell remoting features directly from the interactive console &lt;/li&gt;    &lt;li&gt;Access hundreds of pre-loaded scripts in the personal QuickClickâ¢ library &lt;/li&gt;    &lt;li&gt;Download thousands of community scripts from PowerShell.com, TechNet and PoshCode â directly from the PowerShell Plus console and editor &lt;/li&gt;    &lt;li&gt;Debug PowerShell 10x faster with the advanced script editor and easily share your scripts with the PowerShell community Code&lt;/li&gt; &lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Watching PS Vars for changes - Events</title>
      <link>https://qawarrior.github.io/2011/02/15/watching-ps-vars-for-changes---events</link>
      <pubDate>Tue, 15 Feb 2011 13:47:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/02/15/watching-ps-vars-for-changes---events</guid>
      <description>&lt;p&gt;I have a Testing framework built around Powershell and .net. In the framework there are a couple of main objects that their property values are assigned to Globals that are well know and used. The problem was I did not want to make them read only as this causes issues if reloading the framework and or trying to change paths. I needed a way to report back the value of a variable if it changes so i could keep the objects in sync. First I used Set-PSBreakPoint âAction to Check the value but it breaks before the value is set. Then I thought I need an Event but Powershell has limited native events. So I just started tweeting and thanks to @oising I finally have a solution. Here is a simple example that can be built upon. &lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;pre&gt;&lt;span style=&#34;color: #008000&#34;&gt;#Set value to a new variable&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$n&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;#set A break point to watch for any write actions to that variable&lt;br /&gt;#this will fire a new event VariableChanged&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$BP&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Set-PSBreakpoint&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Variable&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Mode&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;Write&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Action&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; {&lt;br /&gt;    &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;New-Event&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-SourceIdentifier&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;VariableChanged&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;#Now register to recieve the VariableChanged events&lt;br /&gt;#Here we just check the value of our variable and get its new value&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$EE&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Register-EngineEvent&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-SourceIdentifier&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;VariableChanged&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Action&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; {&lt;br /&gt;    &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$n&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-ForegroundColor&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;Yellow&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;#assign a new value to n and see the vent fires&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$n&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;#do some cleanup&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-PSBreakpoint&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Remove-PSBreakpoint&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-EventSubscriber&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Unregister-Event&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Force&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-Event&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Remove-Event&lt;/span&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;Good-Times | Get-Command â:)&lt;/p&gt;  
</description>
    </item>
    
    <item>
      <title>PowerShell Plus 4.0 beta</title>
      <link>https://qawarrior.github.io/2011/01/27/powershell-plus-4.0-beta</link>
      <pubDate>Thu, 27 Jan 2011 07:10:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/01/27/powershell-plus-4.0-beta</guid>
      <description>&lt;p&gt;Idera has released a Beta for the 4.0 version of Powershell Plus.&lt;/p&gt;  &lt;h4&gt;PowerShell Plus 4.0 beta introduces a completely redesigned UI so you can code faster, debug more easily and quickly access your favorite features.&lt;/h4&gt;  &lt;ul&gt;   &lt;li&gt;Redesigned UI puts the most used features at your finger tips &lt;/li&gt;    &lt;li&gt;Work more efficiently by customizing the UI to meet your specific needs &lt;/li&gt;    &lt;li&gt;New Start Page links to educational resources and a customizable news feed &lt;/li&gt;    &lt;li&gt;Syntax Error List helps you identify errors at a glance for faster debugging &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Register and Download it Here.&lt;/p&gt;  &lt;p&gt;&lt;a href=&#34;http://www.idera.com/Promo/PowerShell-Plus-Beta/?s=IderaEB&amp;amp;elq=18d2827c66294d559522a5a169ae6537&#34;&gt;Powershell Plus 4.0 Beta&lt;/a&gt;&lt;/p&gt;  
</description>
    </item>
    
    <item>
      <title>Solved: Powershell fails as a functional language if commands are in modules.</title>
      <link>https://qawarrior.github.io/2011/01/04/solved-powershell-fails-as-a-functional-language-if-commands-are-in-modules.</link>
      <pubDate>Tue, 04 Jan 2011 14:13:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/01/04/solved-powershell-fails-as-a-functional-language-if-commands-are-in-modules.</guid>
      <description>&lt;p&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;the issue comes down to the scope that the scriptblock being passed into the function gets bound. In the original example the scriptblock was being bound to the callers scope which can not access anything in the module except what was imported into the scope. The fix turns out to be explicitly binding the scriptblock to the modules scope. See the fixed example below. Thanks go out to @Oisin for the fix.&lt;/p&gt;  &lt;pre&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;New-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;lsquo;&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;lsquo;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-ScriptBlock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; {&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000cd&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;                       [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;                       [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;scriptblock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               )&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000cd&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;                       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;                               [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;                       )&lt;br /&gt;                       &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               }&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Mod&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; ( &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Mod&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #8b4513&#34;&gt;NewBoundScriptBlock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;) )&lt;br /&gt;       }&lt;br /&gt;} &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Import-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Force&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Global&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;Paul&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; { &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; }&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Remove-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Force&lt;/span&gt;&lt;/pre&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Powershell fails as a functional language if commands are in modules.</title>
      <link>https://qawarrior.github.io/2011/01/04/powershell-fails-as-a-functional-language-if-commands-are-in-modules.</link>
      <pubDate>Tue, 04 Jan 2011 09:57:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/01/04/powershell-fails-as-a-functional-language-if-commands-are-in-modules.</guid>
      <description>&lt;p&gt;&lt;p&gt;I have some functions that contain functions. When I put the Functions in a .ps1 file and Dot Source directly the behave great but if those functions get imported in a module they fail to find the inner function with a CommandNotFound error. It does not matter if the functions are directly in a .psm1 file or if they are dot sourced by the .psm1 file they still fail to find the inner functions. Here are some code examples. Why is this? You can copy the below code into Powershell Console or ISE and run to see the errors.&lt;/p&gt;  &lt;pre&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;               [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;scriptblock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;       )&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000cd&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;                       [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               )&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;       }&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;Paul&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; { &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;New-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;lsquo;&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;Testing&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;lsquo;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-ScriptBlock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; {&lt;br /&gt;       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000cd&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;                       [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;                       [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;scriptblock&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               )&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000cd&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;{&lt;br /&gt;                       &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;br /&gt;                               [&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;                       )&lt;br /&gt;                       &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               }&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Host&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;               &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;       }&lt;br /&gt;} &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Import-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Force&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Global&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestOuter&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;Paul&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-TestScript&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; { &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;TestInner&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Count&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; }&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5th Silicon Valley Code Camp Oct 9th and 10th 2010</title>
      <link>https://qawarrior.github.io/2010/05/17/5th-silicon-valley-code-camp-oct-9th-and-10th-2010</link>
      <pubDate>Mon, 17 May 2010 10:16:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2010/05/17/5th-silicon-valley-code-camp-oct-9th-and-10th-2010</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.SiliconValley-Codecamp.com&#34;&gt;&lt;img alt=&#34;CodeCamp at FootHill College.  Click Here for Details and Registration&#34; src=&#34;http://www.siliconvalley-codecamp.com/DisplayAd.ashx?ImageType=4&#34; longdesc=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;I will be giving a session âAdvanced Scripting with Powershellâ and My co-worker SPowser will be doiing âPowershell Modulesâ come and enjoy, Its free and lunch is provided. It will only cost you a weekend but why not hang with geeks and further you knowledge.&lt;/p&gt;  
</description>
    </item>
    
  </channel>
</rss>
