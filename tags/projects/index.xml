<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Paul Cassidy Software Developer</title>
    <link>https://qawarrior.github.io/tags/projects/index.xml</link>
    <description>Recent content in Projects on Paul Cassidy Software Developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Paul H Cassidy</copyright>
    <atom:link href="/tags/projects/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PoshLogger 2.0 Now On Github</title>
      <link>https://qawarrior.github.io/2017/04/28/poshlogger-2.0-now-on-github</link>
      <pubDate>Fri, 28 Apr 2017 13:16:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2017/04/28/poshlogger-2.0-now-on-github</guid>
      <description></description>
    </item>
    
    <item>
      <title>ISESteriods makes ISE Professional Scripting IDE</title>
      <link>https://qawarrior.github.io/2014/05/30/isesteriods-makes-ise-professional-scripting-ide</link>
      <pubDate>Fri, 30 May 2014 12:18:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/05/30/isesteriods-makes-ise-professional-scripting-ide</guid>
      <description></description>
    </item>
    
    <item>
      <title>Credential IO Script</title>
      <link>https://qawarrior.github.io/2014/05/29/credential-io-script</link>
      <pubDate>Thu, 29 May 2014 08:52:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/05/29/credential-io-script</guid>
      <description>&lt;p&gt;This is an updated version of the Import and Export Credential functions that store the creds in a json format versus the clixml format used by the original created by the guys @ powertips &amp;amp; powershell.com. I also store them in a known location and I use a string for a look up key to store and retrieve them. This allows me to use EFS to further secure the files on the drive. Enjoy!!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;http://pastebin.com/embed_js.php?i=6gZq24wX&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell Objects - New-Module Cmdlet Pt. 2</title>
      <link>https://qawarrior.github.io/2014/05/24/powershell-objects---new-module-cmdlet-pt.-2</link>
      <pubDate>Sat, 24 May 2014 19:28:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/05/24/powershell-objects---new-module-cmdlet-pt.-2</guid>
      <description>&lt;p&gt;If you remember Last we talked we had an Object with 4 Public NoteProperties, 1 Public ScriptMethod, and 1 private member. Now if we look at our ScriptMethod it returns a string unless -AsBool is passed, this can cause issues, like hindering ISE&#39;s ability to display Intellisense for the method / function because we are unable to decorate our function with the [OutputType] attribute.&lt;/p&gt;&lt;p&gt;&lt;img style=&#34;float: left;&#34; src=&#34;http://lh5.ggpht.com/-r-QeCTxUyuQ/U4FTSCPTshI/AAAAAAAAENk/iPaJesSwJd0/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;795&#34; height=&#34;137&#34; /&gt;&lt;/p&gt;&lt;p&gt;To correct this and make the code much more standardized i want to expose the IsPublished variable since it contains the boolean value indicating if the BlogPost has been published. Also notice that the value of the IsPublished value is being controlled by the object and that is important because we don&#39;t want someone or something else to come and set the value to false after we have successfully published the article to the web. So we need to set this Variable to be Read-Only, There are a couple of different ways to do this in PowerShell. First way is use the Set-Variable Cmdlet like so.&lt;/p&gt;&lt;p&gt;&lt;img style=&#34;float: left;&#34; src=&#34;http://lh3.ggpht.com/-AixXbCL7jus/U4FT4P3pX-I/AAAAAAAAEOE/ij4sXy29OWA/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;816&#34; height=&#34;169&#34; /&gt;&lt;/p&gt;&lt;p&gt;Lets run this code again and update the object that $BlogPostInfo contains a reference to and pipe it to Get-Member.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh4.ggpht.com/--LLiQ0CPnR0/U4FURIluAGI/AAAAAAAAEOM/LqyL6NBSldc/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;847&#34; height=&#34;438&#34; /&gt;&lt;/p&gt;&lt;p&gt;IsPublished is now listed as a Public NoteProperty and you can see we have retrieved its value, but what about setting it.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh6.ggpht.com/-TSE3OcddeBs/U4FUcQr_h8I/AAAAAAAAEOU/cCk5DG6Puo8/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;844&#34; height=&#34;201&#34; /&gt;&lt;/p&gt;&lt;p&gt;OK we see it&#39;s current value is set to $false and we receive and error when we try to set it&#39;s value with a simple assignment statement. So we are good to go, right, maybe lets see. first modify Get-PublishingStatus function so it has and empty param block and add the [OtutputType([System.String])] attribute between the Param block and the [CmdletBinding(PositionalBinding)] attribute, this lets ISE and other PS Editors and Tools what to expect a call to the function to return. Modify the Process block, remove the check for $AsBool and its surrounding context, leaving just a check to $this.IsPublished and returning the appropriate string value. The $this variable is a powershell automatic variable that references the current object, it is only available inside object body or a scriptblock. now we add a function definition for Publish-BlogPost that returns a bool on successful publishing, it also sets the IsPublished NoteProperty to $true since we are publishing the Post. Add the new function to the list of functions exported by the object.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh6.ggpht.com/-oHVVU2H2WTA/U4FUqz19rPI/AAAAAAAAEOc/lg4KCqy_1kY/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;849&#34; height=&#34;504&#34; /&gt;&lt;/p&gt;&lt;p&gt;Now we rerun the code to update our $BlogPostInfo variable with a reference to our newly modified object.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh5.ggpht.com/-NV4fROqy-gs/U4FUza2GMaI/AAAAAAAAEOk/AcUU3ntz5Jw/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;863&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;&lt;p&gt;OK as we can see IsPublished is $false then we call Publish-BlogPost() which appears to finish successfully but when we check IsPublished Â again it is still $false, after looking a the $Error variable we see that an error happened when trying to update IsPublished Value it failed because it is ReadOnly which means that the value assigned to it cannot change after assignment, so that is not what we want. So like I said there are a couple of ways to get the desired behavior and interestingly enough they both involve using the same Cmdlet Add-Member. Keeping the code we have now and changing the Set-Variable call to a Add-Member call.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh3.ggpht.com/-6gPhG7aw7Kg/U4FU-bsc21I/AAAAAAAAEOs/UOsiq5jstNc/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;857&#34; height=&#34;149&#34; /&gt;&lt;/p&gt;&lt;p&gt;Running and Inspecting this code we find it works. IsPublished is now updated when the Publish-BlogPost method is called.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh5.ggpht.com/-ojPFjig3uOg/U4FVRsRtiJI/AAAAAAAAEO8/upc7mXGPW10/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;853&#34; height=&#34;130&#34; /&gt;&lt;/p&gt;&lt;p&gt;Awesome we have a ReadOnly NoteProperty, well no we don&#39;t because we did not update the member IsPublished we overwrote it&#39;s definition and replaced it with a new version that did not include the ReadOnly option so now the variable is free to be updated by any object, process, etc. Also another problem is that anytime we want to change its value we have to overwrite its implementation in memory and when overwriting (overriding) the member when need to define it exactly the same each time or run into issues of scoping and accessibility. Remember i said there was another way using add-member and it is to change the formal definition of the IsPublished member. I removed the current variable altogether. I pipe the object to Add-Member and add a script property that contains only a get scriptblock that returns $False and the modified the Publish-BlogPost Script Method to Call add-member and add the same script property but this tme it returns $True.&lt;/p&gt;&lt;script src=&#34;http://pastebin.com/embed_js.php?i=KvuK4tvU&#34;&gt;&lt;/script&gt;&lt;p&gt;Next Time will will talk of further uses of the New-Module Cmdlet pertaining to Object creation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Project: PoshLogger</title>
      <link>https://qawarrior.github.io/2011/03/29/new-project-poshlogger</link>
      <pubDate>Tue, 29 Mar 2011 10:56:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2011/03/29/new-project-poshlogger</guid>
      <description>&lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;New on Codeplex @ &lt;a href=&#34;http://poshlogger.codeplex&#34;&gt;http://poshlogger.codeplex&lt;/a&gt; my project to create a good, easy, unified logger for powerShell scripts, and PowerShell applications. I started with a script that Joel Bennet posted on poshcode.org and next thing you know I had a simple logger that I have been using in my internal projects on a day to day basis. If your looking for a logger jump in and help create a really great Logging Experience in PowerShell. My thanks to Joel for the Idea and thanks to the log4net team for the object model. &lt;/p&gt;  &lt;p&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Import-Module&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;PoshLogger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;      &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$Mylogger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ff0000&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Get-Logger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;Test 123&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-ConsoleLog&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-EventLog&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-RollingFileLog&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Folder&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; text-decoration: underline&#34;&gt;.\Logs&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Set-DefaultLogger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Logger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800080&#34;&gt;$MyLogger&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;      &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Push-LogContext&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Name&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;My Context&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Write-Log&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-Message&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&amp;quot;Logging This To Many Various Target&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;-LogLevel&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;INFO&lt;/span&gt;&lt;span style=&#34;color: #800000&#34;&gt;&#39;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;     &lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;color: #5f9ea0&#34;&gt;Pop-Location&lt;/span&gt;&lt;/p&gt;  
</description>
    </item>
    
  </channel>
</rss>
