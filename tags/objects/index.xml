<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Objects on Paul Cassidy Software Developer</title>
    <link>https://qawarrior.github.io/tags/objects/index.xml</link>
    <description>Recent content in Objects on Paul Cassidy Software Developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Paul H Cassidy</copyright>
    <atom:link href="/tags/objects/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PowerShell Objects - Import-Module Pt 3</title>
      <link>https://qawarrior.github.io/2014/06/11/powershell-objects---import-module-pt-3</link>
      <pubDate>Wed, 11 Jun 2014 14:37:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/06/11/powershell-objects---import-module-pt-3</guid>
      <description>&lt;p&gt;&lt;span style=&#34;font-family: Arial, Helvetica, sans-serif;&#34;&gt;The -AsCustomObject switch on the New-Module Cmdlet is also available in the Import-Module which opens up a whole new world of using PowerShell objects and modules. Imagine you need to import 2 modules to work with Hyper-V and VMWare in your script but after importing them in that order you notice that Get-VM for VMWare is visiable and the Get-VM command from the Hyper-v module is hidden. The are a couple of way to handle modules with command that are the same name. One would be to use the get-command command to invoke the correct command from the correct module. My perfered way is to use the -AsCustomObject switch when importing the modules. This way I hsave the modules and there commands neatly reference in variable so that it is easy to tell which module the command i am executng is going to run against. Example (sudo-code   module names may net be correct)&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: Arial, Helvetica, sans-serif;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;font-family: Arial, Helvetica, sans-serif;&#34;&gt;. &lt;script src=&#34;http://pastebin.com/embed_js.php?i=hPYzXnPA&#34;&gt;&lt;/script&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell Objects - New-Module Cmdlet Pt. 2</title>
      <link>https://qawarrior.github.io/2014/05/24/powershell-objects---new-module-cmdlet-pt.-2</link>
      <pubDate>Sat, 24 May 2014 19:28:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/05/24/powershell-objects---new-module-cmdlet-pt.-2</guid>
      <description>&lt;p&gt;If you remember Last we talked we had an Object with 4 Public NoteProperties, 1 Public ScriptMethod, and 1 private member. Now if we look at our ScriptMethod it returns a string unless -AsBool is passed, this can cause issues, like hindering ISE&#39;s ability to display Intellisense for the method / function because we are unable to decorate our function with the [OutputType] attribute.&lt;/p&gt;&lt;p&gt;&lt;img style=&#34;float: left;&#34; src=&#34;http://lh5.ggpht.com/-r-QeCTxUyuQ/U4FTSCPTshI/AAAAAAAAENk/iPaJesSwJd0/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;795&#34; height=&#34;137&#34; /&gt;&lt;/p&gt;&lt;p&gt;To correct this and make the code much more standardized i want to expose the IsPublished variable since it contains the boolean value indicating if the BlogPost has been published. Also notice that the value of the IsPublished value is being controlled by the object and that is important because we don&#39;t want someone or something else to come and set the value to false after we have successfully published the article to the web. So we need to set this Variable to be Read-Only, There are a couple of different ways to do this in PowerShell. First way is use the Set-Variable Cmdlet like so.&lt;/p&gt;&lt;p&gt;&lt;img style=&#34;float: left;&#34; src=&#34;http://lh3.ggpht.com/-AixXbCL7jus/U4FT4P3pX-I/AAAAAAAAEOE/ij4sXy29OWA/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;816&#34; height=&#34;169&#34; /&gt;&lt;/p&gt;&lt;p&gt;Lets run this code again and update the object that $BlogPostInfo contains a reference to and pipe it to Get-Member.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh4.ggpht.com/--LLiQ0CPnR0/U4FURIluAGI/AAAAAAAAEOM/LqyL6NBSldc/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;847&#34; height=&#34;438&#34; /&gt;&lt;/p&gt;&lt;p&gt;IsPublished is now listed as a Public NoteProperty and you can see we have retrieved its value, but what about setting it.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh6.ggpht.com/-TSE3OcddeBs/U4FUcQr_h8I/AAAAAAAAEOU/cCk5DG6Puo8/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;844&#34; height=&#34;201&#34; /&gt;&lt;/p&gt;&lt;p&gt;OK we see it&#39;s current value is set to $false and we receive and error when we try to set it&#39;s value with a simple assignment statement. So we are good to go, right, maybe lets see. first modify Get-PublishingStatus function so it has and empty param block and add the [OtutputType([System.String])] attribute between the Param block and the [CmdletBinding(PositionalBinding)] attribute, this lets ISE and other PS Editors and Tools what to expect a call to the function to return. Modify the Process block, remove the check for $AsBool and its surrounding context, leaving just a check to $this.IsPublished and returning the appropriate string value. The $this variable is a powershell automatic variable that references the current object, it is only available inside object body or a scriptblock. now we add a function definition for Publish-BlogPost that returns a bool on successful publishing, it also sets the IsPublished NoteProperty to $true since we are publishing the Post. Add the new function to the list of functions exported by the object.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh6.ggpht.com/-oHVVU2H2WTA/U4FUqz19rPI/AAAAAAAAEOc/lg4KCqy_1kY/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;849&#34; height=&#34;504&#34; /&gt;&lt;/p&gt;&lt;p&gt;Now we rerun the code to update our $BlogPostInfo variable with a reference to our newly modified object.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh5.ggpht.com/-NV4fROqy-gs/U4FUza2GMaI/AAAAAAAAEOk/AcUU3ntz5Jw/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;863&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;&lt;p&gt;OK as we can see IsPublished is $false then we call Publish-BlogPost() which appears to finish successfully but when we check IsPublished  again it is still $false, after looking a the $Error variable we see that an error happened when trying to update IsPublished Value it failed because it is ReadOnly which means that the value assigned to it cannot change after assignment, so that is not what we want. So like I said there are a couple of ways to get the desired behavior and interestingly enough they both involve using the same Cmdlet Add-Member. Keeping the code we have now and changing the Set-Variable call to a Add-Member call.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh3.ggpht.com/-6gPhG7aw7Kg/U4FU-bsc21I/AAAAAAAAEOs/UOsiq5jstNc/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;857&#34; height=&#34;149&#34; /&gt;&lt;/p&gt;&lt;p&gt;Running and Inspecting this code we find it works. IsPublished is now updated when the Publish-BlogPost method is called.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://lh5.ggpht.com/-ojPFjig3uOg/U4FVRsRtiJI/AAAAAAAAEO8/upc7mXGPW10/%25255BUNSET%25255D.jpg&#34; alt=&#34;&#34; width=&#34;853&#34; height=&#34;130&#34; /&gt;&lt;/p&gt;&lt;p&gt;Awesome we have a ReadOnly NoteProperty, well no we don&#39;t because we did not update the member IsPublished we overwrote it&#39;s definition and replaced it with a new version that did not include the ReadOnly option so now the variable is free to be updated by any object, process, etc. Also another problem is that anytime we want to change its value we have to overwrite its implementation in memory and when overwriting (overriding) the member when need to define it exactly the same each time or run into issues of scoping and accessibility. Remember i said there was another way using add-member and it is to change the formal definition of the IsPublished member. I removed the current variable altogether. I pipe the object to Add-Member and add a script property that contains only a get scriptblock that returns $False and the modified the Publish-BlogPost Script Method to Call add-member and add the same script property but this tme it returns $True.&lt;/p&gt;&lt;script src=&#34;http://pastebin.com/embed_js.php?i=KvuK4tvU&#34;&gt;&lt;/script&gt;&lt;p&gt;Next Time will will talk of further uses of the New-Module Cmdlet pertaining to Object creation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PowerShell Object Creation – New-Module Pt. 1</title>
      <link>https://qawarrior.github.io/2014/05/20/powershell-object-creation--new-module-pt.-1</link>
      <pubDate>Tue, 20 May 2014 18:20:00 +0000</pubDate>
      
      <guid>https://qawarrior.github.io/2014/05/20/powershell-object-creation--new-module-pt.-1</guid>
      <description>&lt;p&gt;&lt;br /&gt;I have seen quite a few posts on creating custom objects in PowerShell, comparing it to techniques used in languages such as JavaScript but most use some variation of defining an object literal using Select-Object, New-Object, or a HashTable that is cast to PSCustomObject which are all fine and great ways of creating a one off Property Bag. These posts seem skip the most powerful way to define objects in PowerShell and that is to use the New-Module Cmdlet. The New-Module Cmdlet has a switch –AsCustomObject and a parameter –ScriptBlock that allow you to define a custom object. Inside the ScriptBlock every Variable defined is a property and you control whether it’s public or private by using the Export-ModuleMember Cmdlet if you export a variable it is public otherwise it is private. The most powerful part comes in the form that your functions defined inside the module ScriptBlock become the methods and the parameters define the methods arguments for the object and again the visibility is controlled by the Export-ModuleMember Cmdlet. The Functions can be Advanced Functions with Parameter Validation and Comment Based Help. Lets look at some code.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;http://pastebin.com/embed_js.php?i=1HFDnMVq&#34;&gt;&lt;/script&gt;&lt;br /&gt;&lt;br /&gt;Running this code will provide us with a local variable $BlogPostInfo that we can inspect. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;http://lh6.ggpht.com/-DkjLrcN6r6g/U3v_dNXe-JI/AAAAAAAAELE/_YlnCyIBj5c/s1600-h/Example.001%25255B3%25255D.jpg&#34;&gt;&lt;img alt=&#34;Example.001&#34; border=&#34;0&#34; src=&#34;http://lh3.ggpht.com/-1t3W2D5Av8w/U3v_d1Esh0I/AAAAAAAAELM/8KJVXnZILTE/Example.001_thumb%25255B1%25255D.jpg?imgmax=800&#34; height=&#34;323&#34; style=&#34;border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline;&#34; title=&#34;Example.001&#34; width=&#34;744&#34; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;We can see that the variable has the PSCustomObject type and are variable are now NoteProperties and our function is now a ScriptMethod. Also notice that our IsPublished variable is not included in the list because it is private, we did not export it. Next time we will cover some advanced topics such as defining ScriptProperties and method overriding.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;$Until_Then = Good-Times | Get-Command&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
